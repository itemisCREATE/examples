testclass CoffeeMachineTest for statechart CoffeeMachine {
	
	@Test
	operation testSwitchOn() {
		enter
		assert active(main.Off)
		
		raise userEvent : UserEvents.ON_OFF
		proceed 1 cycle
		
		assert active(main.On)
		exit
	}
	
	@Test
	operation testSwitchOff() {
		enter
		assert active(main.Off)
		
		raise userEvent : UserEvents.ON_OFF
		proceed 1 cycle
		
		assert active(main.On)
		
		raise userEvent : UserEvents.ON_OFF
		proceed 1 cycle
		
		assert active(main.Off)
		exit
	}
	
	@Test
	operation testHeatingUp() {
		enter
		assert active(main.Off)
		
		raise userEvent : UserEvents.ON_OFF
		proceed 2 cycle
		
		assert active(main.On.r.Heating_Up)
		assert called startHeating()
		
		heater.temp = 70
		proceed 1 cycle
		assert active(main.On.r.Heating_Up)
		heater.temp = 95
		proceed 1 cycle
		assert active(main.On.r.Wait_For_Choice)
		
		exit
	}
	
	@Test
	operation testSaveEnergy() {
		enter
		switchOn()
		heatUp()
		assert active(main.On.r.Wait_For_Choice)
		proceed 30 s
		assert active(main.On.r.Save_Energy)
		
		// recover from save energy by any input
		raise userEvent : UserEvents.COFFEE
		proceed 1 cycle
		assert active(main.On.r.Heating_Up)		
	}
	
	@Test
	operation testBrewCoffeeOnly() {
		// we mock the recipe retrieval here, as we want to test the state machine not the recipe itself
		var coffee : UserEvents = UserEvents.COFFEE
		mock get_recipe(coffee) returns (recipeCoffeeOnly)
		
		enter
		switchOn()
		heatUp()
		raise userEvent : coffee
		proceed 1 cycle
		assert active(main.On.r.Process_Recipe)
		
		// 3g of coffee -> 3s of milling
		assert active(main.On.r.Process_Recipe.r.Make_Coffee.r.Milling_Beans)
		proceed 3s
		
		// 200ml of water -> 12s of brewing
		assert active(main.On.r.Process_Recipe.r.Make_Coffee.r.Brew_Coffee)
		proceed 12s
		
		assert called showDone(coffee)
		assert active(main.On.r.Wait_For_Choice)
	}
	
	@Test
	operation testBrewMilkFirst() {
		// we mock the recipe retrieval here, as we want to test the state machine not the recipe itself
		var cappucino : UserEvents = UserEvents.CAPPUCINO
		mock get_recipe(cappucino) returns (recipeMilkFirst)
		
		enter
		switchOn()
		heatUp()
		raise userEvent : cappucino
		proceed 1 cycle
		assert active(main.On.r.Process_Recipe)
		
		// 120ml of milk -> 7.2s pouring
		assert active(main.On.r.Process_Recipe.r.Make_Milk.r.Make_Steam)
		proceed 7200ms
		
		// 3g of coffee -> 3s of milling
		assert active(main.On.r.Process_Recipe.r.Make_Coffee.r.Milling_Beans)
		proceed 3s
		
		// 80ml of water -> 4.8s of brewing
		assert active(main.On.r.Process_Recipe.r.Make_Coffee.r.Brew_Coffee)
		proceed 4800ms
		
		assert called showDone(cappucino)
		assert active(main.On.r.Wait_For_Choice)
	}
	
	@Test
	operation testBrewCoffeeFirst() {
		// we mock the recipe retrieval here, as we want to test the state machine not the recipe itself
		var cappucino : UserEvents = UserEvents.CAPPUCINO
		mock get_recipe(cappucino) returns (recipeCoffeeFirst)
		
		enter
		switchOn()
		heatUp()
		raise userEvent : cappucino
		proceed 1 cycle
		assert active(main.On.r.Process_Recipe)
		
		// 3g of coffee -> 3s of milling
		assert active(main.On.r.Process_Recipe.r.Make_Coffee.r.Milling_Beans)
		proceed 3s

		// 80ml of water -> 4.8s of brewing
		assert active(main.On.r.Process_Recipe.r.Make_Coffee.r.Brew_Coffee)
		proceed 4800ms
		
		// 120ml of milk -> 7.2s of pouring
		assert active(main.On.r.Process_Recipe.r.Make_Milk.r.Make_Steam)
		proceed 7200ms
		
		assert called showDone(cappucino)
		assert active(main.On.r.Wait_For_Choice)
	}
	
	@Test
	operation testBrewMilkOnly() {
		// we mock the recipe retrieval here, as we want to test the state machine not the recipe itself
		var milk : UserEvents = UserEvents.MILK
		mock get_recipe(milk) returns (recipeMilkOnly)
		
		enter
		switchOn()
		heatUp()
		raise userEvent : milk
		proceed 1 cycle
		assert active(main.On.r.Process_Recipe)
		
		// 150ml of milk -> 9s of pouring
		assert active(main.On.r.Process_Recipe.r.Make_Milk.r.Make_Steam)
		proceed 9s
		
		assert called showDone(milk)
		assert active(main.On.r.Wait_For_Choice)
	}
	
	operation switchOn() {
		raise userEvent : UserEvents.ON_OFF
		proceed 2 cycle
	}
	
	operation heatUp() {
		heater.temp = 95
		proceed 1 cycle
	}
	
	operation recipeCoffeeOnly() : cm_recipe_t {
		var recipe : cm_recipe_t
		recipe.coffee_mass = 3
		recipe.water_volume = 200
		return recipe
	}
	
	operation recipeMilkFirst() : cm_recipe_t {
		var recipe : cm_recipe_t
		recipe.coffee_mass = 3
		recipe.water_volume = 80
		recipe.milk_volume = 120
		recipe.milk_first = true
		return recipe
	}
	
	operation recipeCoffeeFirst() : cm_recipe_t {
		var recipe : cm_recipe_t
		recipe.coffee_mass = 3
		recipe.water_volume = 80
		recipe.milk_volume = 120
		recipe.milk_first = false
		return recipe
	}
	
	operation recipeMilkOnly() : cm_recipe_t {
		var recipe : cm_recipe_t
		recipe.coffee_mass = 0
		recipe.water_volume = 0
		recipe.milk_volume = 150
		recipe.milk_first = true
		return recipe
	}
	
}
