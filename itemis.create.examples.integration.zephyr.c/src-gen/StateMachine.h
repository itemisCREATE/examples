/** Generated by itemis CREATE code generator. */

#ifndef STATEMACHINE_H_
#define STATEMACHINE_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the StateMachine state machine.
*/
typedef struct StateMachine StateMachine;

/*!
* Forward declaration of the data structure for the StateMachineIface interface scope.
*/
typedef struct StateMachineIface StateMachineIface;

/*!
* Forward declaration of the data structure for the StateMachineTimeEvents interface scope.
*/
typedef struct StateMachineTimeEvents StateMachineTimeEvents;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"
#include "sc_rxc.h"
#include <string.h>

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'StateMachine'.
*/

#ifndef STATEMACHINE_EVENTQUEUE_BUFFERSIZE
#define STATEMACHINE_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef STATEMACHINE_IN_EVENTQUEUE_BUFFERSIZE
#define STATEMACHINE_IN_EVENTQUEUE_BUFFERSIZE STATEMACHINE_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define STATEMACHINE_STATE_COUNT 3

/*! Define dimension of the state configuration vector for orthogonal states. */
#define STATEMACHINE_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define STATEMACHINE_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_STATEMACHINE_MAIN_REGION_STATEA 0
#define SCVI_STATEMACHINE_MAIN_REGION_STATEB 0
#define SCVI_STATEMACHINE_MAIN_REGION__FINAL_ 0


/* 
 * Enum of event names in the statechart.
 */
typedef enum  {
	StateMachine_invalid_event = SC_INVALID_EVENT_VALUE,
	StateMachine_inEvent1,
	StateMachine_inEvent2,
	StateMachine_StateMachine_main_region_StateB_time_event_0
} StateMachineEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	StateMachineEventID name;
} statemachine_event;

/*
 * Queue that holds the raised events.
 */
typedef struct statemachine_eventqueue_s {
	statemachine_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} statemachine_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	StateMachine_last_state,
	StateMachine_main_region_StateA,
	StateMachine_main_region_StateB,
	StateMachine_main_region__final_
} StateMachineStates;


/*! Type declaration of the data structure for the StateMachineIface interface scope. */
struct StateMachineIface
{
	sc_boolean inEvent1_raised;
	sc_boolean inEvent2_raised;
	sc_observable outEvent1;
	sc_observable outEvent2;
};



/*! Type declaration of the data structure for the StateMachineTimeEvents interface scope. */
struct StateMachineTimeEvents
{
	sc_boolean stateMachine_main_region_StateB_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the StateMachine state machine.
 * This data structure has to be allocated by the client code. 
 */
struct StateMachine
{
	StateMachineStates stateConfVector[STATEMACHINE_MAX_ORTHOGONAL_STATES];
	StateMachineIface iface;
	StateMachineTimeEvents timeEvents;
	sc_boolean isExecuting;
	statemachine_eventqueue in_event_queue;
	statemachine_event in_buffer[STATEMACHINE_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the StateMachine state machine data structures. Must be called before first usage.*/
extern void stateMachine_init(StateMachine* handle);


/*! Activates the state machine. */
extern void stateMachine_enter(StateMachine* handle);

/*! Deactivates the state machine. */
extern void stateMachine_exit(StateMachine* handle);

/*! 
Can be used by the client code to trigger a run to completion step without raising an event.
*/
extern void stateMachine_trigger_without_event(StateMachine* handle);


/*! Raises a time event. */
extern void stateMachine_raise_time_event(StateMachine* handle, sc_eventid evid);

/*! Raises the in event 'inEvent1' that is defined in the default interface scope. */ 
extern void stateMachine_raise_inEvent1(StateMachine* handle);
/*! Raises the in event 'inEvent2' that is defined in the default interface scope. */ 
extern void stateMachine_raise_inEvent2(StateMachine* handle);
/*! Returns the observable for the out event 'outEvent1' that is defined in the default interface scope. */ 
extern sc_observable* stateMachine_get_outEvent1(StateMachine* handle);

/*! Returns the observable for the out event 'outEvent2' that is defined in the default interface scope. */ 
extern sc_observable* stateMachine_get_outEvent2(StateMachine* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean stateMachine_is_active(const StateMachine* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean stateMachine_is_final(const StateMachine* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean stateMachine_is_state_active(const StateMachine* handle, StateMachineStates state);


#ifdef __cplusplus
}
#endif 

#endif /* STATEMACHINE_H_ */
