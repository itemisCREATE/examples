/** Generated by itemis CREATE code generator. */

#include "TrafficLightStateMachine.h"

/*! \file
Implementation of the state machine 'TrafficLightStateMachine'
*/




TrafficLightStateMachine::TrafficLightStateMachine(QObject *parent) noexcept :
	standby_raised(false),
	operate_raised(false),
	timerService(nullptr),
	isExecuting(false)
{
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = TrafficLightStateMachine::State::NO_STATE;
	
	clearInEvents();
}

TrafficLightStateMachine::~TrafficLightStateMachine()
{
}



std::unique_ptr<TrafficLightStateMachine::EventInstance> TrafficLightStateMachine::getNextEvent() noexcept
{
	std::unique_ptr<TrafficLightStateMachine::EventInstance> nextEvent = 0;

	if(!incomingEventQueue.empty()) {
		nextEvent = std::move(incomingEventQueue.front());
		incomingEventQueue.pop_front();
	}
	
	return nextEvent;
	
}					


template<typename EWV, typename EV>
std::unique_ptr<EWV> cast_event_pointer_type (std::unique_ptr<EV>&& event){
    return std::unique_ptr<EWV>{static_cast<EWV*>(event.release())};
}
	
bool TrafficLightStateMachine::dispatchEvent(std::unique_ptr<TrafficLightStateMachine::EventInstance> event) noexcept
{
	if(event == nullptr) {
		return false;
	}
								
	switch(event->eventId)
	{
		case TrafficLightStateMachine::Event::standby:
		{
			standby_raised = true;
			break;
		}
		case TrafficLightStateMachine::Event::operate:
		{
			operate_raised = true;
			break;
		}
		
		
		case TrafficLightStateMachine::Event::_te0_trafficlight_operating_r_prepare_switch_to_go_:
		case TrafficLightStateMachine::Event::_te1_trafficlight_operating_r_prepare_switch_to_stop_:
		case TrafficLightStateMachine::Event::_te2_trafficlight_operating_r_stop_:
		case TrafficLightStateMachine::Event::_te3_trafficlight_operating_r_go_:
		case TrafficLightStateMachine::Event::_te4_trafficlight_standby_blink_on_:
		case TrafficLightStateMachine::Event::_te5_trafficlight_standby_blink_off_:
		{
			timeEvents[static_cast<sc::integer>(event->eventId) - static_cast<sc::integer>(TrafficLightStateMachine::Event::_te0_trafficlight_operating_r_prepare_switch_to_go_)] = true;
			break;
		}
		default:
			//pointer got out of scope
			return false;
	}
	//pointer got out of scope
	return true;
}


sc::rx::Observable<void>& TrafficLightStateMachine::getRedOn() noexcept {
	return this->redOn_observable;
}


sc::rx::Observable<void>& TrafficLightStateMachine::getRedOff() noexcept {
	return this->redOff_observable;
}


sc::rx::Observable<void>& TrafficLightStateMachine::getYellowOn() noexcept {
	return this->yellowOn_observable;
}


sc::rx::Observable<void>& TrafficLightStateMachine::getYellowOff() noexcept {
	return this->yellowOff_observable;
}


sc::rx::Observable<void>& TrafficLightStateMachine::getGreenOn() noexcept {
	return this->greenOn_observable;
}


sc::rx::Observable<void>& TrafficLightStateMachine::getGreenOff() noexcept {
	return this->greenOff_observable;
}


/*! Slot for the in event 'standby' that is defined in the default interface scope. */
void TrafficLightStateMachine::standby() {
	incomingEventQueue.push_back(std::unique_ptr<TrafficLightStateMachine::EventInstance>(new TrafficLightStateMachine::EventInstance(TrafficLightStateMachine::Event::standby)))
	;
	runCycle();
}


/*! Slot for the in event 'operate' that is defined in the default interface scope. */
void TrafficLightStateMachine::operate() {
	incomingEventQueue.push_back(std::unique_ptr<TrafficLightStateMachine::EventInstance>(new TrafficLightStateMachine::EventInstance(TrafficLightStateMachine::Event::operate)))
	;
	runCycle();
}



bool TrafficLightStateMachine::isActive() const noexcept
{
	return stateConfVector[0] != TrafficLightStateMachine::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool TrafficLightStateMachine::isFinal() const noexcept
{
	   return false;
}

bool TrafficLightStateMachine::check() const noexcept{
	if(timerService == nullptr) {
		return false;
	}
	return true;
}


void TrafficLightStateMachine::setTimerService(std::shared_ptr<sc::timer::TimerServiceInterface> timerService_) noexcept
{
	this->timerService = timerService_;
}

std::shared_ptr<sc::timer::TimerServiceInterface> TrafficLightStateMachine::getTimerService() noexcept
{
	return timerService;
}

sc::integer TrafficLightStateMachine::getNumberOfParallelTimeEvents() noexcept {
	return parallelTimeEventsCount;
}

void TrafficLightStateMachine::raiseTimeEvent(sc::eventid evid)
{
	if (evid < timeEventsCount)
	{
		incomingEventQueue.push_back(std::unique_ptr< EventInstance>(new EventInstance(static_cast<TrafficLightStateMachine::Event>(evid + static_cast<sc::integer>(TrafficLightStateMachine::Event::_te0_trafficlight_operating_r_prepare_switch_to_go_)))));
		runCycle();
	}
}


bool TrafficLightStateMachine::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case TrafficLightStateMachine::State::trafficlight_operating :
		{
			return  (stateConfVector[scvi_trafficlight_operating] >= TrafficLightStateMachine::State::trafficlight_operating && stateConfVector[scvi_trafficlight_operating] <= TrafficLightStateMachine::State::trafficlight_operating_r_go);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_prepare :
		{
			return  (stateConfVector[scvi_trafficlight_operating_r_prepare] >= TrafficLightStateMachine::State::trafficlight_operating_r_prepare && stateConfVector[scvi_trafficlight_operating_r_prepare] <= TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go :
		{
			return  (stateConfVector[scvi_trafficlight_operating_r_prepare_switch_to_go] == TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop :
		{
			return  (stateConfVector[scvi_trafficlight_operating_r_prepare_switch_to_stop] == TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_stop :
		{
			return  (stateConfVector[scvi_trafficlight_operating_r_stop] == TrafficLightStateMachine::State::trafficlight_operating_r_stop);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_go :
		{
			return  (stateConfVector[scvi_trafficlight_operating_r_go] == TrafficLightStateMachine::State::trafficlight_operating_r_go);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_standby :
		{
			return  (stateConfVector[scvi_trafficlight_standby] >= TrafficLightStateMachine::State::trafficlight_standby && stateConfVector[scvi_trafficlight_standby] <= TrafficLightStateMachine::State::trafficlight_standby_blink_off);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_standby_blink_on :
		{
			return  (stateConfVector[scvi_trafficlight_standby_blink_on] == TrafficLightStateMachine::State::trafficlight_standby_blink_on);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_standby_blink_off :
		{
			return  (stateConfVector[scvi_trafficlight_standby_blink_off] == TrafficLightStateMachine::State::trafficlight_standby_blink_off);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}


// implementations of all internal functions
sc::integer TrafficLightStateMachine::react(const sc::integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc::integer TrafficLightStateMachine::trafficlight_operating_react(const sc::integer transitioned_before) {
	/* The reactions of state operating. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (standby_raised)
		{ 
			/* Default exit sequence for state operating */
			/* Default exit sequence for region r */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.operating.r) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go :
				{
					/* Default exit sequence for state to go */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'to go'. */
					timerService->unsetTimer(shared_from_this(), 0);
					redOff_observable.next();
					emit redOff();
					/* Exit action for state 'prepare'. */
					yellowOff_observable.next();
					emit yellowOff();
					break;
				}
				case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop :
				{
					/* Default exit sequence for state to stop */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'to stop'. */
					timerService->unsetTimer(shared_from_this(), 1);
					/* Exit action for state 'prepare'. */
					yellowOff_observable.next();
					emit yellowOff();
					break;
				}
				case TrafficLightStateMachine::State::trafficlight_operating_r_stop :
				{
					/* Default exit sequence for state stop */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'stop'. */
					timerService->unsetTimer(shared_from_this(), 2);
					redOff_observable.next();
					emit redOff();
					break;
				}
				case TrafficLightStateMachine::State::trafficlight_operating_r_go :
				{
					/* Default exit sequence for state go */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'go'. */
					timerService->unsetTimer(shared_from_this(), 3);
					greenOff_observable.next();
					emit greenOff();
					break;
				}
				default:
					/* do nothing */
					break;
			}
			/* 'default' enter sequence for state standby */
			/* 'default' enter sequence for region blink */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state on */
			/* Entry action for state 'on'. */
			timerService->setTimer(shared_from_this(), 4, (((sc::time) 1) * 1000), false);
			yellowOn_observable.next();
			emit yellowOn();
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_standby_blink_on;
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_operating_r_prepare_react(const sc::integer transitioned_before) {
	/* The reactions of state prepare. */
	sc::integer transitioned_after = transitioned_before;
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = trafficlight_operating_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_operating_r_prepare_switch_to_go_react(const sc::integer transitioned_before) {
	/* The reactions of state to go. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[0])
		{ 
			/* Default exit sequence for state prepare */
			/* Default exit sequence for region switch */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.operating.r.prepare.switch) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go :
				{
					/* Default exit sequence for state to go */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'to go'. */
					timerService->unsetTimer(shared_from_this(), 0);
					redOff_observable.next();
					emit redOff();
					break;
				}
				case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop :
				{
					/* Default exit sequence for state to stop */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'to stop'. */
					timerService->unsetTimer(shared_from_this(), 1);
					break;
				}
				default:
					/* do nothing */
					break;
			}
			/* Exit action for state 'prepare'. */
			yellowOff_observable.next();
			emit yellowOff();
			timeEvents[0] = false;
			/* 'default' enter sequence for state go */
			/* Entry action for state 'go'. */
			timerService->setTimer(shared_from_this(), 3, (((sc::time) 3) * 1000), false);
			greenOn_observable.next();
			emit greenOn();
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_operating_r_go;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = trafficlight_operating_r_prepare_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_operating_r_prepare_switch_to_stop_react(const sc::integer transitioned_before) {
	/* The reactions of state to stop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[1])
		{ 
			/* Default exit sequence for state prepare */
			/* Default exit sequence for region switch */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.operating.r.prepare.switch) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go :
				{
					/* Default exit sequence for state to go */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'to go'. */
					timerService->unsetTimer(shared_from_this(), 0);
					redOff_observable.next();
					emit redOff();
					break;
				}
				case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop :
				{
					/* Default exit sequence for state to stop */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'to stop'. */
					timerService->unsetTimer(shared_from_this(), 1);
					break;
				}
				default:
					/* do nothing */
					break;
			}
			/* Exit action for state 'prepare'. */
			yellowOff_observable.next();
			emit yellowOff();
			timeEvents[1] = false;
			/* 'default' enter sequence for state stop */
			/* Entry action for state 'stop'. */
			timerService->setTimer(shared_from_this(), 2, (((sc::time) 3) * 1000), false);
			redOn_observable.next();
			emit redOn();
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_operating_r_stop;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = trafficlight_operating_r_prepare_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_operating_r_stop_react(const sc::integer transitioned_before) {
	/* The reactions of state stop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[2])
		{ 
			/* Default exit sequence for state stop */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'stop'. */
			timerService->unsetTimer(shared_from_this(), 2);
			redOff_observable.next();
			emit redOff();
			timeEvents[2] = false;
			/* Entry action for state 'prepare'. */
			yellowOn_observable.next();
			emit yellowOn();
			/* 'default' enter sequence for state to go */
			/* Entry action for state 'to go'. */
			timerService->setTimer(shared_from_this(), 0, (((sc::time) 1) * 1000), false);
			redOn_observable.next();
			emit redOn();
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = trafficlight_operating_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_operating_r_go_react(const sc::integer transitioned_before) {
	/* The reactions of state go. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[3])
		{ 
			/* Default exit sequence for state go */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'go'. */
			timerService->unsetTimer(shared_from_this(), 3);
			greenOff_observable.next();
			emit greenOff();
			timeEvents[3] = false;
			/* Entry action for state 'prepare'. */
			yellowOn_observable.next();
			emit yellowOn();
			/* 'default' enter sequence for state to stop */
			/* Entry action for state 'to stop'. */
			timerService->setTimer(shared_from_this(), 1, (((sc::time) 1) * 1000), false);
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = trafficlight_operating_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_standby_react(const sc::integer transitioned_before) {
	/* The reactions of state standby. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (operate_raised)
		{ 
			/* Default exit sequence for state standby */
			/* Default exit sequence for region blink */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.standby.blink) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case TrafficLightStateMachine::State::trafficlight_standby_blink_on :
				{
					/* Default exit sequence for state on */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'on'. */
					timerService->unsetTimer(shared_from_this(), 4);
					yellowOff_observable.next();
					emit yellowOff();
					break;
				}
				case TrafficLightStateMachine::State::trafficlight_standby_blink_off :
				{
					/* Default exit sequence for state off */
					stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
					/* Exit action for state 'off'. */
					timerService->unsetTimer(shared_from_this(), 5);
					break;
				}
				default:
					/* do nothing */
					break;
			}
			/* 'default' enter sequence for state operating */
			/* 'default' enter sequence for region r */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state stop */
			/* Entry action for state 'stop'. */
			timerService->setTimer(shared_from_this(), 2, (((sc::time) 3) * 1000), false);
			redOn_observable.next();
			emit redOn();
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_operating_r_stop;
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_standby_blink_on_react(const sc::integer transitioned_before) {
	/* The reactions of state on. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[4])
		{ 
			/* Default exit sequence for state on */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'on'. */
			timerService->unsetTimer(shared_from_this(), 4);
			yellowOff_observable.next();
			emit yellowOff();
			timeEvents[4] = false;
			/* 'default' enter sequence for state off */
			/* Entry action for state 'off'. */
			timerService->setTimer(shared_from_this(), 5, (((sc::time) 1) * 1000), false);
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_standby_blink_off;
			trafficlight_standby_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = trafficlight_standby_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer TrafficLightStateMachine::trafficlight_standby_blink_off_react(const sc::integer transitioned_before) {
	/* The reactions of state off. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[5])
		{ 
			/* Default exit sequence for state off */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'off'. */
			timerService->unsetTimer(shared_from_this(), 5);
			timeEvents[5] = false;
			/* 'default' enter sequence for state on */
			/* Entry action for state 'on'. */
			timerService->setTimer(shared_from_this(), 4, (((sc::time) 1) * 1000), false);
			yellowOn_observable.next();
			emit yellowOn();
			stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_standby_blink_on;
			trafficlight_standby_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = trafficlight_standby_react(transitioned_before);
	} 
	return transitioned_after;
}

void TrafficLightStateMachine::clearInEvents() noexcept {
	standby_raised = false;
	operate_raised = false;
	timeEvents[0] = false;
	timeEvents[1] = false;
	timeEvents[2] = false;
	timeEvents[3] = false;
	timeEvents[4] = false;
	timeEvents[5] = false;
}

void TrafficLightStateMachine::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go :
		{
			trafficlight_operating_r_prepare_switch_to_go_react(-1);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop :
		{
			trafficlight_operating_r_prepare_switch_to_stop_react(-1);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_stop :
		{
			trafficlight_operating_r_stop_react(-1);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_go :
		{
			trafficlight_operating_r_go_react(-1);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_standby_blink_on :
		{
			trafficlight_standby_blink_on_react(-1);
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_standby_blink_off :
		{
			trafficlight_standby_blink_off_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void TrafficLightStateMachine::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatchEvent(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
	} while (dispatchEvent(getNextEvent()));
	isExecuting = false;
}

void TrafficLightStateMachine::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart TrafficLightStateMachine */
	/* Entry action for statechart 'TrafficLightStateMachine'. */
	redOff_observable.next();
	emit redOff();
	yellowOff_observable.next();
	emit yellowOff();
	greenOff_observable.next();
	emit greenOff();
	/* 'default' enter sequence for region trafficlight */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state operating */
	/* 'default' enter sequence for region r */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state stop */
	/* Entry action for state 'stop'. */
	timerService->setTimer(shared_from_this(), 2, (((sc::time) 3) * 1000), false);
	redOn_observable.next();
	emit redOn();
	stateConfVector[0] = TrafficLightStateMachine::State::trafficlight_operating_r_stop;
	isExecuting = false;
}

void TrafficLightStateMachine::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart TrafficLightStateMachine */
	/* Default exit sequence for region trafficlight */
	/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_go :
		{
			/* Default exit sequence for state to go */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'to go'. */
			timerService->unsetTimer(shared_from_this(), 0);
			redOff_observable.next();
			emit redOff();
			/* Exit action for state 'prepare'. */
			yellowOff_observable.next();
			emit yellowOff();
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_prepare_switch_to_stop :
		{
			/* Default exit sequence for state to stop */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'to stop'. */
			timerService->unsetTimer(shared_from_this(), 1);
			/* Exit action for state 'prepare'. */
			yellowOff_observable.next();
			emit yellowOff();
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_stop :
		{
			/* Default exit sequence for state stop */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'stop'. */
			timerService->unsetTimer(shared_from_this(), 2);
			redOff_observable.next();
			emit redOff();
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_operating_r_go :
		{
			/* Default exit sequence for state go */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'go'. */
			timerService->unsetTimer(shared_from_this(), 3);
			greenOff_observable.next();
			emit greenOff();
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_standby_blink_on :
		{
			/* Default exit sequence for state on */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'on'. */
			timerService->unsetTimer(shared_from_this(), 4);
			yellowOff_observable.next();
			emit yellowOff();
			break;
		}
		case TrafficLightStateMachine::State::trafficlight_standby_blink_off :
		{
			/* Default exit sequence for state off */
			stateConfVector[0] = TrafficLightStateMachine::State::NO_STATE;
			/* Exit action for state 'off'. */
			timerService->unsetTimer(shared_from_this(), 5);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void TrafficLightStateMachine::triggerWithoutEvent() {
	runCycle();
}

