/** Generated by itemis CREATE code generator. */
package traffic.light;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class TrafficLightCtrl implements ITimed, IEventDriven {
	public static class TrafficLight {
		private TrafficLightCtrl parent;
		
		public TrafficLight(TrafficLightCtrl parent) {
			this.parent = parent;
		}
		private boolean displayRed;
		
		
		protected void raiseDisplayRed() {
			synchronized(parent) {
				displayRed = true;
				displayRedObservable.next(null);
			}
		}
		
		private Observable<Void> displayRedObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayRed() {
			return displayRedObservable;
		}
		
		private boolean displayGreen;
		
		
		protected void raiseDisplayGreen() {
			synchronized(parent) {
				displayGreen = true;
				displayGreenObservable.next(null);
			}
		}
		
		private Observable<Void> displayGreenObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayGreen() {
			return displayGreenObservable;
		}
		
		private boolean displayYellow;
		
		
		protected void raiseDisplayYellow() {
			synchronized(parent) {
				displayYellow = true;
				displayYellowObservable.next(null);
			}
		}
		
		private Observable<Void> displayYellowObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayYellow() {
			return displayYellowObservable;
		}
		
		private boolean displayNone;
		
		
		protected void raiseDisplayNone() {
			synchronized(parent) {
				displayNone = true;
				displayNoneObservable.next(null);
			}
		}
		
		private Observable<Void> displayNoneObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayNone() {
			return displayNoneObservable;
		}
		
	}
	
	public static class Timer {
		private TrafficLightCtrl parent;
		
		public Timer(TrafficLightCtrl parent) {
			this.parent = parent;
		}
		private boolean updateTimerColour;
		
		private String updateTimerColourValue;
		
		
		protected void raiseUpdateTimerColour(String value) {
			synchronized(parent) {
				updateTimerColourValue = value;
				updateTimerColour = true;
				updateTimerColourObservable.next(value);
			}
		}
		
		private Observable<String> updateTimerColourObservable = new Observable<String>();
		
		public Observable<String> getUpdateTimerColour() {
			return updateTimerColourObservable;
		}
		
		private boolean updateTimerValue;
		
		private long updateTimerValueValue;
		
		
		protected void raiseUpdateTimerValue(long value) {
			synchronized(parent) {
				updateTimerValueValue = value;
				updateTimerValue = true;
				updateTimerValueObservable.next(value);
			}
		}
		
		private Observable<Long> updateTimerValueObservable = new Observable<Long>();
		
		public Observable<Long> getUpdateTimerValue() {
			return updateTimerValueObservable;
		}
		
		public static final long oFF = -(1l);
		
		public synchronized long getOFF() {
			synchronized(parent) {
				return oFF;
			}
		}
		
	}
	
	protected TrafficLight trafficLight;
	
	protected Timer timer;
	
	public enum State {
		MAIN_MAIN,
		MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED,
		MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK,
		MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN,
		MAIN_MAIN_TIMER_DISABLED,
		MAIN_MAIN_TIMER_RUNNING,
		MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN,
		MAIN_MAIN_TIMER_RUNNING_RUNNING_RED,
		MAIN_OFF,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[5];
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private BlockingQueue<Runnable> internalEventQueue = new LinkedBlockingQueue<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean resetTimer;
	private boolean disableTimer;
	private boolean enableTimer;
	private long counter;
	
	protected long getCounter() {
		synchronized(TrafficLightCtrl.this) {
			return counter;
		}
	}
	
	protected void setCounter(long value) {
		synchronized(TrafficLightCtrl.this) {
			this.counter = value;
		}
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(TrafficLightCtrl.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(TrafficLightCtrl.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(TrafficLightCtrl.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(TrafficLightCtrl.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public TrafficLightCtrl() {
		trafficLight = new TrafficLight(this);
		timer = new Timer(this);
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 5; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		/* Default init sequence for statechart TrafficLightCtrl */
		setRedPeriod(12l);
		setGreenPeriod(8l);
		setYellowPeriod(3l);
		setCounter(0l);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default enter sequence for statechart TrafficLightCtrl */
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		/* Default exit sequence for statechart TrafficLightCtrl */
		exitSequence_main();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		police_interrupt = false;
		toggle = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
	}
	
	private void clearInternalEvents() {
		resetTimer = false;
		disableTimer = false;
		enableTimer = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			transitioned = main_main_trafficlight_interrupted_blinking_Black_react(transitioned);
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			transitioned = main_main_trafficlight_interrupted_blinking_Yellow_react(transitioned);
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			transitioned = main_main_trafficlight_normal_normal_Red_react(transitioned);
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			transitioned = main_main_trafficlight_normal_normal_Yellow_react(transitioned);
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			transitioned = main_main_trafficlight_normal_normal_Green_react(transitioned);
			break;
		case MAIN_OFF:
			transitioned = main_off_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_MAIN_TIMER_DISABLED:
				main_main_timer_disabled_react(transitioned);
				break;
			case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
				main_main_timer_running_running_Green_react(transitioned);
				break;
			case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
				main_main_timer_running_running_Red_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return true;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_MAIN:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED.ordinal();
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW.ordinal();
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_TRAFFICLIGHT_NORMAL.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN.ordinal();
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN;
		case MAIN_MAIN_TIMER_DISABLED:
			return stateVector[1] == State.MAIN_MAIN_TIMER_DISABLED;
		case MAIN_MAIN_TIMER_RUNNING:
			return stateVector[1].ordinal() >= State.
					MAIN_MAIN_TIMER_RUNNING.ordinal()&& stateVector[1].ordinal() <= State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED.ordinal();
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			return stateVector[1] == State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			return stateVector[1] == State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED;
		case MAIN_OFF:
			return stateVector[0] == State.MAIN_OFF;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public TrafficLight trafficLight() {
		return trafficLight;
	}
	
	public Timer timer() {
		return timer;
	}
	
	
	protected void raiseResetTimer() {
		internalEventQueue.add(() -> {
			resetTimer = true;
		});
	}
	
	protected void raiseDisableTimer() {
		internalEventQueue.add(() -> {
			disableTimer = true;
		});
	}
	
	protected void raiseEnableTimer() {
		internalEventQueue.add(() -> {
			enableTimer = true;
		});
	}
	
	private boolean police_interrupt;
	
	
	public void raisePolice_interrupt() {
		synchronized(TrafficLightCtrl.this) {
			inEventQueue.add(() -> {
				police_interrupt = true;
			});
			runCycle();
		}
	}
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		synchronized(TrafficLightCtrl.this) {
			inEventQueue.add(() -> {
				toggle = true;
			});
			runCycle();
		}
	}
	
	private long redPeriod;
	
	public synchronized long getRedPeriod() {
		synchronized(TrafficLightCtrl.this) {
			return redPeriod;
		}
	}
	
	public void setRedPeriod(long value) {
		synchronized(TrafficLightCtrl.this) {
			this.redPeriod = value;
		}
	}
	
	private long greenPeriod;
	
	public synchronized long getGreenPeriod() {
		synchronized(TrafficLightCtrl.this) {
			return greenPeriod;
		}
	}
	
	public void setGreenPeriod(long value) {
		synchronized(TrafficLightCtrl.this) {
			this.greenPeriod = value;
		}
	}
	
	private long yellowPeriod;
	
	public synchronized long getYellowPeriod() {
		synchronized(TrafficLightCtrl.this) {
			return yellowPeriod;
		}
	}
	
	public void setYellowPeriod(long value) {
		synchronized(TrafficLightCtrl.this) {
			this.yellowPeriod = value;
		}
	}
	
	/* Entry action for state 'Black'. */
	private void entryAction_main_main_trafficlight_interrupted_blinking_Black() {
		/* Entry action for state 'Black'. */
		timerService.setTimer(this, 0, 500l, false);
		trafficLight.raiseDisplayNone();
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_main_trafficlight_interrupted_blinking_Yellow() {
		/* Entry action for state 'Yellow'. */
		timerService.setTimer(this, 1, 500l, false);
		trafficLight.raiseDisplayYellow();
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction_main_main_trafficlight_normal_normal_Red() {
		/* Entry action for state 'Red'. */
		timerService.setTimer(this, 2, (getRedPeriod() * 1000l), false);
		trafficLight.raiseDisplayRed();
		setCounter(redPeriod);
		raiseResetTimer();
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_main_trafficlight_normal_normal_Yellow() {
		/* Entry action for state 'Yellow'. */
		timerService.setTimer(this, 3, (getYellowPeriod() * 1000l), false);
		trafficLight.raiseDisplayYellow();
		raiseDisableTimer();
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction_main_main_trafficlight_normal_normal_Green() {
		/* Entry action for state 'Green'. */
		timerService.setTimer(this, 4, (getGreenPeriod() * 1000l), false);
		trafficLight.raiseDisplayGreen();
		setCounter(greenPeriod);
		raiseResetTimer();
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction_main_main_timer_running_running_Green() {
		/* Entry action for state 'Green'. */
		timerService.setTimer(this, 5, (1l * 1000l), false);
		timer.raiseUpdateTimerValue(getCounter());
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction_main_main_timer_running_running_Red() {
		/* Entry action for state 'Red'. */
		timerService.setTimer(this, 6, (1l * 1000l), false);
		timer.raiseUpdateTimerValue(getCounter());
	}
	
	/* Exit action for state 'main'. */
	private void exitAction_main_main() {
		/* Exit action for state 'main'. */
		trafficLight.raiseDisplayNone();
	}
	
	/* Exit action for state 'Black'. */
	private void exitAction_main_main_trafficlight_interrupted_blinking_Black() {
		/* Exit action for state 'Black'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Yellow'. */
	private void exitAction_main_main_trafficlight_interrupted_blinking_Yellow() {
		/* Exit action for state 'Yellow'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Red'. */
	private void exitAction_main_main_trafficlight_normal_normal_Red() {
		/* Exit action for state 'Red'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Yellow'. */
	private void exitAction_main_main_trafficlight_normal_normal_Yellow() {
		/* Exit action for state 'Yellow'. */
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Green'. */
	private void exitAction_main_main_trafficlight_normal_normal_Green() {
		/* Exit action for state 'Green'. */
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'running'. */
	private void exitAction_main_main_timer_running() {
		/* Exit action for state 'running'. */
		timer.raiseUpdateTimerValue(timer.getOFF());
	}
	
	/* Exit action for state 'Green'. */
	private void exitAction_main_main_timer_running_running_Green() {
		/* Exit action for state 'Green'. */
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Red'. */
	private void exitAction_main_main_timer_running_running_Red() {
		/* Exit action for state 'Red'. */
		timerService.unsetTimer(this, 6);
	}
	
	/* 'default' enter sequence for state main */
	private void enterSequence_main_main_default() {
		/* 'default' enter sequence for state main */
		enterSequence_main_main_trafficlight_default();
		enterSequence_main_main_timer_default();
	}
	
	/* 'default' enter sequence for state interrupted */
	private void enterSequence_main_main_trafficlight_interrupted_default() {
		/* 'default' enter sequence for state interrupted */
		enterSequence_main_main_trafficlight_interrupted_blinking_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Black */
	private void enterSequence_main_main_trafficlight_interrupted_blinking_Black_default() {
		/* 'default' enter sequence for state Black */
		entryAction_main_main_trafficlight_interrupted_blinking_Black();
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK;
		stateConfVectorPosition = 0;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default() {
		/* 'default' enter sequence for state Yellow */
		entryAction_main_main_trafficlight_interrupted_blinking_Yellow();
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW;
		stateConfVectorPosition = 0;
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state normal */
	private void enterSequence_main_main_trafficlight_normal_default() {
		/* 'default' enter sequence for state normal */
		enterSequence_main_main_trafficlight_normal_normal_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence_main_main_trafficlight_normal_normal_Red_default() {
		/* 'default' enter sequence for state Red */
		entryAction_main_main_trafficlight_normal_normal_Red();
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED;
		stateConfVectorPosition = 0;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_main_trafficlight_normal_normal_Yellow_default() {
		/* 'default' enter sequence for state Yellow */
		entryAction_main_main_trafficlight_normal_normal_Yellow();
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW;
		stateConfVectorPosition = 0;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence_main_main_trafficlight_normal_normal_Green_default() {
		/* 'default' enter sequence for state Green */
		entryAction_main_main_trafficlight_normal_normal_Green();
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN;
		stateConfVectorPosition = 0;
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state disabled */
	private void enterSequence_main_main_timer_disabled_default() {
		/* 'default' enter sequence for state disabled */
		stateVector[1] = State.MAIN_MAIN_TIMER_DISABLED;
		stateConfVectorPosition = 1;
		historyVector[3] = stateVector[1];
	}
	
	/* 'default' enter sequence for state running */
	private void enterSequence_main_main_timer_running_default() {
		/* 'default' enter sequence for state running */
		enterSequence_main_main_timer_running_running_default();
		historyVector[3] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence_main_main_timer_running_running_Green_default() {
		/* 'default' enter sequence for state Green */
		entryAction_main_main_timer_running_running_Green();
		stateVector[1] = State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
		stateConfVectorPosition = 1;
		historyVector[4] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence_main_main_timer_running_running_Red_default() {
		/* 'default' enter sequence for state Red */
		entryAction_main_main_timer_running_running_Red();
		stateVector[1] = State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED;
		stateConfVectorPosition = 1;
		historyVector[4] = stateVector[1];
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_off_default() {
		/* 'default' enter sequence for state off */
		stateVector[0] = State.MAIN_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		/* 'default' enter sequence for region main */
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region trafficlight */
	private void enterSequence_main_main_trafficlight_default() {
		/* 'default' enter sequence for region trafficlight */
		react_main_main_trafficlight__entry_Default();
	}
	
	/* deep enterSequence with history in child trafficlight */
	private void deepEnterSequence_main_main_trafficlight() {
		/* deep enterSequence with history in child trafficlight */
		switch (historyVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			/* enterSequence with history in child interrupted for leaf Black */
			deepEnterSequence_main_main_trafficlight_interrupted_blinking();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			/* enterSequence with history in child interrupted for leaf Yellow */
			deepEnterSequence_main_main_trafficlight_interrupted_blinking();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			/* enterSequence with history in child normal for leaf Red */
			deepEnterSequence_main_main_trafficlight_normal_normal();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			/* enterSequence with history in child normal for leaf Yellow */
			deepEnterSequence_main_main_trafficlight_normal_normal();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			/* enterSequence with history in child normal for leaf Green */
			deepEnterSequence_main_main_trafficlight_normal_normal();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region blinking */
	private void enterSequence_main_main_trafficlight_interrupted_blinking_default() {
		/* 'default' enter sequence for region blinking */
		react_main_main_trafficlight_interrupted_blinking__entry_Default();
	}
	
	/* deep enterSequence with history in child blinking */
	private void deepEnterSequence_main_main_trafficlight_interrupted_blinking() {
		/* deep enterSequence with history in child blinking */
		switch (historyVector[1]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			/* enterSequence with history in child Black for leaf Black */
			enterSequence_main_main_trafficlight_interrupted_blinking_Black_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			/* enterSequence with history in child Yellow for leaf Yellow */
			enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region normal */
	private void enterSequence_main_main_trafficlight_normal_normal_default() {
		/* 'default' enter sequence for region normal */
		react_main_main_trafficlight_normal_normal__entry_Default();
	}
	
	/* deep enterSequence with history in child normal */
	private void deepEnterSequence_main_main_trafficlight_normal_normal() {
		/* deep enterSequence with history in child normal */
		switch (historyVector[2]) {
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			/* enterSequence with history in child Red for leaf Red */
			enterSequence_main_main_trafficlight_normal_normal_Red_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			/* enterSequence with history in child Yellow for leaf Yellow */
			enterSequence_main_main_trafficlight_normal_normal_Yellow_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			/* enterSequence with history in child Green for leaf Green */
			enterSequence_main_main_trafficlight_normal_normal_Green_default();
			break;
		default:
			break;
		}
	}
	
	/* shallow enterSequence with history in child normal */
	private void shallowEnterSequence_main_main_trafficlight_normal_normal() {
		/* shallow enterSequence with history in child normal */
		switch (historyVector[2]) {
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			enterSequence_main_main_trafficlight_normal_normal_Red_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			enterSequence_main_main_trafficlight_normal_normal_Yellow_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			enterSequence_main_main_trafficlight_normal_normal_Green_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region timer */
	private void enterSequence_main_main_timer_default() {
		/* 'default' enter sequence for region timer */
		react_main_main_timer__entry_Default();
	}
	
	/* deep enterSequence with history in child timer */
	private void deepEnterSequence_main_main_timer() {
		/* deep enterSequence with history in child timer */
		switch (historyVector[3]) {
		case MAIN_MAIN_TIMER_DISABLED:
			/* enterSequence with history in child disabled for leaf disabled */
			enterSequence_main_main_timer_disabled_default();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			/* enterSequence with history in child running for leaf Green */
			deepEnterSequence_main_main_timer_running_running();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			/* enterSequence with history in child running for leaf Red */
			deepEnterSequence_main_main_timer_running_running();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region running */
	private void enterSequence_main_main_timer_running_running_default() {
		/* 'default' enter sequence for region running */
		react_main_main_timer_running_running__entry_Default();
	}
	
	/* deep enterSequence with history in child running */
	private void deepEnterSequence_main_main_timer_running_running() {
		/* deep enterSequence with history in child running */
		switch (historyVector[4]) {
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			/* enterSequence with history in child Green for leaf Green */
			enterSequence_main_main_timer_running_running_Green_default();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			/* enterSequence with history in child Red for leaf Red */
			enterSequence_main_main_timer_running_running_Red_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state main */
	private void exitSequence_main_main() {
		/* Default exit sequence for state main */
		exitSequence_main_main_trafficlight();
		exitSequence_main_main_timer();
		exitAction_main_main();
	}
	
	/* Default exit sequence for state interrupted */
	private void exitSequence_main_main_trafficlight_interrupted() {
		/* Default exit sequence for state interrupted */
		exitSequence_main_main_trafficlight_interrupted_blinking();
	}
	
	/* Default exit sequence for state Black */
	private void exitSequence_main_main_trafficlight_interrupted_blinking_Black() {
		/* Default exit sequence for state Black */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_main_trafficlight_interrupted_blinking_Black();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_main_trafficlight_interrupted_blinking_Yellow() {
		/* Default exit sequence for state Yellow */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_main_trafficlight_interrupted_blinking_Yellow();
	}
	
	/* Default exit sequence for state normal */
	private void exitSequence_main_main_trafficlight_normal() {
		/* Default exit sequence for state normal */
		exitSequence_main_main_trafficlight_normal_normal();
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence_main_main_trafficlight_normal_normal_Red() {
		/* Default exit sequence for state Red */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_main_trafficlight_normal_normal_Red();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_main_trafficlight_normal_normal_Yellow() {
		/* Default exit sequence for state Yellow */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_main_trafficlight_normal_normal_Yellow();
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence_main_main_trafficlight_normal_normal_Green() {
		/* Default exit sequence for state Green */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		exitAction_main_main_trafficlight_normal_normal_Green();
	}
	
	/* Default exit sequence for state disabled */
	private void exitSequence_main_main_timer_disabled() {
		/* Default exit sequence for state disabled */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state running */
	private void exitSequence_main_main_timer_running() {
		/* Default exit sequence for state running */
		exitSequence_main_main_timer_running_running();
		exitAction_main_main_timer_running();
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence_main_main_timer_running_running_Green() {
		/* Default exit sequence for state Green */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		exitAction_main_main_timer_running_running_Green();
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence_main_main_timer_running_running_Red() {
		/* Default exit sequence for state Red */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		exitAction_main_main_timer_running_running_Red();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_off() {
		/* Default exit sequence for state off */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		/* Default exit sequence for region main */
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			exitSequence_main_main_trafficlight_interrupted_blinking_Black();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_trafficlight_normal_normal_Red();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			exitSequence_main_main_trafficlight_normal_normal_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_trafficlight_normal_normal_Green();
			break;
		case MAIN_OFF:
			exitSequence_main_off();
			break;
		default:
			break;
		}
		switch (stateVector[1]) {
		case MAIN_MAIN_TIMER_DISABLED:
			exitSequence_main_main_timer_disabled();
			exitAction_main_main();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			exitAction_main_main_timer_running();
			exitAction_main_main();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_main_timer_running_running_Red();
			exitAction_main_main_timer_running();
			exitAction_main_main();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region trafficlight */
	private void exitSequence_main_main_trafficlight() {
		/* Default exit sequence for region trafficlight */
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			exitSequence_main_main_trafficlight_interrupted_blinking_Black();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_trafficlight_normal_normal_Red();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			exitSequence_main_main_trafficlight_normal_normal_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_trafficlight_normal_normal_Green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region blinking */
	private void exitSequence_main_main_trafficlight_interrupted_blinking() {
		/* Default exit sequence for region blinking */
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			exitSequence_main_main_trafficlight_interrupted_blinking_Black();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region normal */
	private void exitSequence_main_main_trafficlight_normal_normal() {
		/* Default exit sequence for region normal */
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_trafficlight_normal_normal_Red();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			exitSequence_main_main_trafficlight_normal_normal_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_trafficlight_normal_normal_Green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region timer */
	private void exitSequence_main_main_timer() {
		/* Default exit sequence for region timer */
		switch (stateVector[1]) {
		case MAIN_MAIN_TIMER_DISABLED:
			exitSequence_main_main_timer_disabled();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			exitAction_main_main_timer_running();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_main_timer_running_running_Red();
			exitAction_main_main_timer_running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region running */
	private void exitSequence_main_main_timer_running_running() {
		/* Default exit sequence for region running */
		switch (stateVector[1]) {
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_main_timer_running_running_Red();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_main_timer_running_running__choice_0() {
		/* The reactions of state null. */
		if (isStateActive(State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN)) {
			timer.raiseUpdateTimerColour("Green");
			enterSequence_main_main_timer_running_running_Green_default();
		} else {
			timer.raiseUpdateTimerColour("Red");
			enterSequence_main_main_timer_running_running_Red_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_trafficlight_interrupted_blinking__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_trafficlight_normal_normal__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_main_trafficlight_normal_normal_Red_default();
	}
	
	/* Default react sequence for shallow history entry hist */
	private void react_main_main_trafficlight_normal_normal_hist() {
		/* Default react sequence for shallow history entry hist */
		/* Enter the region with shallow history */
		if (historyVector[2] != State.$NULLSTATE$) {
			shallowEnterSequence_main_main_trafficlight_normal_normal();
		} else {
			enterSequence_main_main_trafficlight_normal_normal_Red_default();
		}
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_main_trafficlight__entry_Default() {
		/* Default react sequence for deep history entry  */
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_main_main_trafficlight();
		} else {
			enterSequence_main_main_trafficlight_normal_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_timer_running_running__entry_Default() {
		/* Default react sequence for initial entry  */
		react_main_main_timer_running_running__choice_0();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_main_timer__entry_Default() {
		/* Default react sequence for deep history entry  */
		/* Enter the region with deep history */
		if (historyVector[3] != State.$NULLSTATE$) {
			deepEnterSequence_main_main_timer();
		} else {
			enterSequence_main_main_timer_running_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_main_off_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before;
	}
	
	private long main_main_react(long transitioned_before) {
		/* The reactions of state main. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_main_main();
				enterSequence_main_off_default();
				react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_trafficlight_interrupted_react(long transitioned_before) {
		/* The reactions of state interrupted. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (police_interrupt) {
				exitSequence_main_main_trafficlight_interrupted();
				raiseEnableTimer();
				react_main_main_trafficlight_normal_normal_hist();
				historyVector[0] = stateVector[0];
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_trafficlight_interrupted_blinking_Black_react(long transitioned_before) {
		/* The reactions of state Black. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_main_trafficlight_interrupted_blinking_Black();
				timeEvents[0] = false;
				enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default();
				main_main_trafficlight_interrupted_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_trafficlight_interrupted_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_trafficlight_interrupted_blinking_Yellow_react(long transitioned_before) {
		/* The reactions of state Yellow. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
				timeEvents[1] = false;
				enterSequence_main_main_trafficlight_interrupted_blinking_Black_default();
				main_main_trafficlight_interrupted_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_trafficlight_interrupted_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_trafficlight_normal_react(long transitioned_before) {
		/* The reactions of state normal. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (police_interrupt) {
				exitSequence_main_main_trafficlight_normal();
				raiseDisableTimer();
				enterSequence_main_main_trafficlight_interrupted_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_trafficlight_normal_normal_Red_react(long transitioned_before) {
		/* The reactions of state Red. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_main_trafficlight_normal_normal_Red();
				timeEvents[2] = false;
				enterSequence_main_main_trafficlight_normal_normal_Green_default();
				main_main_trafficlight_normal_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_trafficlight_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_trafficlight_normal_normal_Yellow_react(long transitioned_before) {
		/* The reactions of state Yellow. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[3]) {
				exitSequence_main_main_trafficlight_normal_normal_Yellow();
				raiseEnableTimer();
				timeEvents[3] = false;
				enterSequence_main_main_trafficlight_normal_normal_Red_default();
				main_main_trafficlight_normal_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_trafficlight_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_trafficlight_normal_normal_Green_react(long transitioned_before) {
		/* The reactions of state Green. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (timeEvents[4]) {
				exitSequence_main_main_trafficlight_normal_normal_Green();
				timeEvents[4] = false;
				enterSequence_main_main_trafficlight_normal_normal_Yellow_default();
				main_main_trafficlight_normal_react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_trafficlight_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_timer_disabled_react(long transitioned_before) {
		/* The reactions of state disabled. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (enableTimer) {
				exitSequence_main_main_timer_disabled();
				enterSequence_main_main_timer_running_default();
				main_main_react(0l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_timer_running_react(long transitioned_before) {
		/* The reactions of state running. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (disableTimer) {
				exitSequence_main_main_timer_running();
				enterSequence_main_main_timer_disabled_default();
				main_main_react(0l);
				transitioned_after = 1l;
			} else {
				if (resetTimer) {
					exitSequence_main_main_timer_running();
					enterSequence_main_main_timer_running_default();
					main_main_react(0l);
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_timer_running_running_Green_react(long transitioned_before) {
		/* The reactions of state Green. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[5]) {
				exitSequence_main_main_timer_running_running_Green();
				setCounter(getCounter() - 1l);
				timeEvents[5] = false;
				enterSequence_main_main_timer_running_running_Green_default();
				main_main_timer_running_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_timer_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_timer_running_running_Red_react(long transitioned_before) {
		/* The reactions of state Red. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (timeEvents[6]) {
				exitSequence_main_main_timer_running_running_Red();
				setCounter(getCounter() - 1l);
				timeEvents[6] = false;
				enterSequence_main_main_timer_running_running_Red_default();
				main_main_timer_running_react(1l);
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = main_main_timer_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_off_react(long transitioned_before) {
		/* The reactions of state off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_main_off();
				enterSequence_main_main_default();
				react(0l);
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken */
		if (transitioned_after==transitioned_before) {
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
