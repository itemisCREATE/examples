/** Generated by itemis CREATE code generator. */

#ifndef LIGHTSWITCH_H_
#define LIGHTSWITCH_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the LightSwitch state machine.
*/
typedef struct LightSwitch LightSwitch;

/*!
* Forward declaration of the data structure for the LightSwitchIfaceUser interface scope.
*/
typedef struct LightSwitchIfaceUser LightSwitchIfaceUser;

/*!
* Forward declaration of the data structure for the LightSwitchIfaceLight interface scope.
*/
typedef struct LightSwitchIfaceLight LightSwitchIfaceLight;

/*!
* Forward declaration of the data structure for the LightSwitchTimeEvents interface scope.
*/
typedef struct LightSwitchTimeEvents LightSwitchTimeEvents;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"
#include "sc_rxc.h"
#include <string.h>

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'LightSwitch'.
*/

#ifndef LIGHTSWITCH_EVENTQUEUE_BUFFERSIZE
#define LIGHTSWITCH_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef LIGHTSWITCH_IN_EVENTQUEUE_BUFFERSIZE
#define LIGHTSWITCH_IN_EVENTQUEUE_BUFFERSIZE LIGHTSWITCH_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define LIGHTSWITCH_STATE_COUNT 2

/*! Define dimension of the state configuration vector for orthogonal states. */
#define LIGHTSWITCH_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define LIGHTSWITCH_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_LIGHTSWITCH_MAIN_REGION_OFF 0
#define SCVI_LIGHTSWITCH_MAIN_REGION_ON 0


/* 
 * Enum of event names in the statechart.
 */
typedef enum  {
	LightSwitch_invalid_event = SC_INVALID_EVENT_VALUE,
	LightSwitch_user_on_button,
	LightSwitch_user_off_button,
	LightSwitch_LightSwitch_main_region_On_time_event_0
} LightSwitchEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	LightSwitchEventID name;
} lightswitch_event;

/*
 * Queue that holds the raised events.
 */
typedef struct lightswitch_eventqueue_s {
	lightswitch_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} lightswitch_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	LightSwitch_last_state,
	LightSwitch_main_region_Off,
	LightSwitch_main_region_On
} LightSwitchStates;


/*! Type declaration of the data structure for the LightSwitchIfaceUser interface scope. */
struct LightSwitchIfaceUser
{
	sc_boolean on_button_raised;
	sc_boolean off_button_raised;
};



/*! Type declaration of the data structure for the LightSwitchIfaceLight interface scope. */
struct LightSwitchIfaceLight
{
	sc_integer brightness;
	sc_observable on;
	sc_observable off;
};



/*! Type declaration of the data structure for the LightSwitchTimeEvents interface scope. */
struct LightSwitchTimeEvents
{
	sc_boolean lightSwitch_main_region_On_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the LightSwitch state machine.
 * This data structure has to be allocated by the client code. 
 */
struct LightSwitch
{
	LightSwitchStates stateConfVector[LIGHTSWITCH_MAX_ORTHOGONAL_STATES];
	LightSwitchIfaceUser ifaceUser;
	LightSwitchIfaceLight ifaceLight;
	LightSwitchTimeEvents timeEvents;
	sc_boolean isExecuting;
	lightswitch_eventqueue in_event_queue;
	lightswitch_event in_buffer[LIGHTSWITCH_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the LightSwitch state machine data structures. Must be called before first usage.*/
extern void lightSwitch_init(LightSwitch* handle);


/*! Activates the state machine. */
extern void lightSwitch_enter(LightSwitch* handle);

/*! Deactivates the state machine. */
extern void lightSwitch_exit(LightSwitch* handle);

/*! 
Can be used by the client code to trigger a run to completion step without raising an event.
*/
extern void lightSwitch_trigger_without_event(LightSwitch* handle);


/*! Raises a time event. */
extern void lightSwitch_raise_time_event(LightSwitch* handle, sc_eventid evid);

/*! Raises the in event 'on_button' that is defined in the interface scope 'user'. */ 
extern void lightSwitch_user_raise_on_button(LightSwitch* handle);
/*! Raises the in event 'off_button' that is defined in the interface scope 'user'. */ 
extern void lightSwitch_user_raise_off_button(LightSwitch* handle);
/*! Gets the value of the variable 'brightness' that is defined in the interface scope 'light'. */ 
extern sc_integer lightSwitch_light_get_brightness(const LightSwitch* handle);
/*! Sets the value of the variable 'brightness' that is defined in the interface scope 'light'. */ 
extern void lightSwitch_light_set_brightness(LightSwitch* handle, sc_integer value);
/*! Returns the observable for the out event 'on' that is defined in the interface scope 'light'. */ 
extern sc_observable* lightSwitch_light_get_on(LightSwitch* handle);

/*! Returns the observable for the out event 'off' that is defined in the interface scope 'light'. */ 
extern sc_observable* lightSwitch_light_get_off(LightSwitch* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean lightSwitch_is_active(const LightSwitch* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean lightSwitch_is_final(const LightSwitch* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean lightSwitch_is_state_active(const LightSwitch* handle, LightSwitchStates state);


#ifdef __cplusplus
}
#endif 

#endif /* LIGHTSWITCH_H_ */
