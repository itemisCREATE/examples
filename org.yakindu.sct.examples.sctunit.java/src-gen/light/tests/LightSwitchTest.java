/** Generated by itemis CREATE code generator. */

package light.tests;

import static org.mockito.Mockito.*;
import static org.mockito.Matchers.*;
import static org.hamcrest.CoreMatchers.*;

import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import light.LightSwitch.Light;
import org.junit.*;
import static org.junit.Assert.*;
import light.LightSwitch;
import light.LightSwitch.State;
import com.yakindu.core.VirtualTimer;

/**
 * Unit TestCase for LightSwitch
 */
@SuppressWarnings("all")
public class LightSwitchTest {
	Light.OperationCallback lightMock;
	
	private LightSwitch statemachine;	
	private VirtualTimer timer;
	
	protected boolean ON;
	protected boolean OFF;
	protected boolean EVENT_RAISED;
	protected boolean EVENT_NOT_RAISED;
	
	@Before
	public void lightSwitchTest_setUp() {
		statemachine = new LightSwitch();
		timer = new VirtualTimer(200);
		statemachine.setTimerService(timer);
		lightMock = mock(Light.OperationCallback.class);
		statemachine.light().setOperationCallback(lightMock);
		
		
		ON = true;
		OFF = false;
		EVENT_RAISED = true;
		EVENT_NOT_RAISED = false;
	}

	@After
	public void lightSwitchTest_tearDown() {
		statemachine.light().setOperationCallback(null);
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void testInitiallyTurnedOff() {
		lightIsOff();
		assertLightIsOff(EVENT_RAISED);
	}
	
	@Test
	public void testTurnOn() {
		lightIsOff();
		pressUserButton(ON, 1l);
		assertLightIsOn(1l, EVENT_RAISED);
	}
	
	@Test
	public void testStaysTurnedOff() {
		lightIsOff();
		pressUserButton(OFF, 10l);
		assertLightIsOff(EVENT_NOT_RAISED);
	}
	
	@Test
	public void testRaiseBrightnessWithDefaultMock() {
		lightIsOn();
		pressUserButton(ON, 10l);
		assertLightIsOn(1l, EVENT_NOT_RAISED);
	}
	
	@Test
	public void testRaiseBrightness() {
		when(lightMock.computeMaxBrightness()).thenAnswer(new Answer<Long>() {
			@Override
			public Long answer(InvocationOnMock invocation) {
				return 5l;
			}
		});
		 
		lightIsOn();
		pressUserButton(ON, 1l);
		assertLightIsOn(2l, EVENT_NOT_RAISED);
	}
	
	@Test
	public void testRaiseToMaxBrightness() {
		when(lightMock.computeMaxBrightness()).thenAnswer(new Answer<Long>() {
			@Override
			public Long answer(InvocationOnMock invocation) {
				return 5l;
			}
		});
		 
		lightIsOn();
		pressUserButton(ON, 5l);
		assertLightIsOn(5l, EVENT_NOT_RAISED);
	}
	
	@Test
	public void testRaiseToMaxBrightnessDoesNotExceedMaximum() {
		when(lightMock.computeMaxBrightness()).thenAnswer(new Answer<Long>() {
			@Override
			public Long answer(InvocationOnMock invocation) {
				return 5l;
			}
		});
		 
		lightIsOn();
		pressUserButton(ON, 10l);
		assertLightIsOn(5l, EVENT_NOT_RAISED);
	}
	
	@Test
	public void testTurnOff() {
		lightIsOn();
		pressUserButton(OFF, 1l);
		assertLightIsOff(EVENT_RAISED);
	}
	
	@Test
	public void testTurnOffAfter30Seconds() {
		lightIsOn();
		timer.timeLeap(30l*1000l);
		assertLightIsOff(EVENT_RAISED);
	}
	
	@Test
	public void testNotTurnOffAfterLessThan30Seconds() {
		lightIsOn();
		timer.timeLeap(29999l);
		assertLightIsOn(1l, EVENT_RAISED);
	}
	
	public void lightIsOff() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(LightSwitch.State.MAIN_REGION_OFF));
		assertTrue(statemachine.light().getBrightness() == 0l);
		assertTrue(statemachine.light().isRaisedOff());
		assertTrue(!statemachine.light().isRaisedOn());
		verify(lightMock, atLeast(0)).computeMaxBrightness();
		 
	}
	
	public void lightIsOn() {
		statemachine.enter();
		statemachine.user().raiseOn_button();
		assertTrue(statemachine.isStateActive(LightSwitch.State.MAIN_REGION_ON));
		assertTrue(statemachine.light().getBrightness() == 1l);
		assertTrue(!statemachine.light().isRaisedOff());
		assertTrue(statemachine.light().isRaisedOn());
		verify(lightMock, atLeast(0)).computeMaxBrightness();
		 
	}
	
	public void pressUserButton(boolean button, long value) {
		while (value > 0l) {
			if (button == ON) {
				statemachine.user().raiseOn_button();
			}
			else {
				statemachine.user().raiseOff_button();
			}
			value -= 1l;
		}
	}
	
	public void assertLightIsOn(long brightness, boolean onIsRaised) {
		assertTrue(statemachine.light().getBrightness() == brightness);
		assertTrue(statemachine.light().isRaisedOn() == onIsRaised);
		assertTrue(statemachine.light().isRaisedOff() == false);
	}
	
	public void assertLightIsOff(boolean offIsRaised) {
		assertTrue(statemachine.light().getBrightness() == 0l);
		assertTrue(statemachine.light().isRaisedOn() == false);
		assertTrue(statemachine.light().isRaisedOff() == offIsRaised);
	}
}
