/** Generated by YAKINDU Statechart Tools code generator. */

#include "TrafficLightStateMachine.h"

/*! \file Implementation of the state machine 'TrafficLightStateMachine'
*/




TrafficLightStateMachine::TrafficLightStateMachine(QObject *parent)  :
QObject(parent),
standby_raised(false),
operate_raised(false),
timerService(sc_null),
isExecuting(false)
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = TrafficLightStateMachine_last_state;
	
	clearInEvents();
}

TrafficLightStateMachine::~TrafficLightStateMachine()
{
}


using namespace trafficlightstatemachine_events;

SctEvent* TrafficLightStateMachine::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

void TrafficLightStateMachine::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return;
	}
	switch(event->name)
	{
		case TrafficLightStateMachineEventName::standby:
		case TrafficLightStateMachineEventName::operate:
		{
			iface_dispatch_event(event);
			break;
		}
		case TrafficLightStateMachineEventName::TrafficLightStateMachine_trafficlight_operating_r_prepare_switch_to_go_time_event_0:
		{
			timeEvents[0] = true;
			break;
		}
		case TrafficLightStateMachineEventName::TrafficLightStateMachine_trafficlight_operating_r_prepare_switch_to_stop_time_event_0:
		{
			timeEvents[1] = true;
			break;
		}
		case TrafficLightStateMachineEventName::TrafficLightStateMachine_trafficlight_operating_r_stop_time_event_0:
		{
			timeEvents[2] = true;
			break;
		}
		case TrafficLightStateMachineEventName::TrafficLightStateMachine_trafficlight_operating_r_go_time_event_0:
		{
			timeEvents[3] = true;
			break;
		}
		case TrafficLightStateMachineEventName::TrafficLightStateMachine_trafficlight_standby_blink_on_time_event_0:
		{
			timeEvents[4] = true;
			break;
		}
		case TrafficLightStateMachineEventName::TrafficLightStateMachine_trafficlight_standby_blink_off_time_event_0:
		{
			timeEvents[5] = true;
			break;
		}
		default:
			break;
	}
	delete event;
}

void TrafficLightStateMachine::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case TrafficLightStateMachineEventName::standby:
		{
			internal_standby();
			break;
		}
		case TrafficLightStateMachineEventName::operate:
		{
			internal_operate();
			break;
		}
		default:
			break;
	}
}

TrafficLightStateMachineEventName TrafficLightStateMachine::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return TrafficLightStateMachine_trafficlight_operating_r_prepare_switch_to_go_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[1])) {
		return TrafficLightStateMachine_trafficlight_operating_r_prepare_switch_to_stop_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[2])) {
		return TrafficLightStateMachine_trafficlight_operating_r_stop_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[3])) {
		return TrafficLightStateMachine_trafficlight_operating_r_go_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[4])) {
		return TrafficLightStateMachine_trafficlight_standby_blink_on_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[5])) {
		return TrafficLightStateMachine_trafficlight_standby_blink_off_time_event_0;
	}
	return invalid_event;
}



sc_boolean TrafficLightStateMachine::isActive() const
{
	return stateConfVector[0] != TrafficLightStateMachine_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean TrafficLightStateMachine::isFinal() const
{
   return false;}

sc_boolean TrafficLightStateMachine::check() {
	if(timerService == sc_null) {
		return false;
	}
	return true;
}


void TrafficLightStateMachine::setTimerService(sc::timer::TimerServiceInterface* timerService)
{
	this->timerService = timerService;
}

sc::timer::TimerServiceInterface* TrafficLightStateMachine::getTimerService()
{
	return timerService;
}

sc_integer TrafficLightStateMachine::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void TrafficLightStateMachine::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean TrafficLightStateMachine::isStateActive(TrafficLightStateMachineStates state) const
{
	switch (state)
	{
		case trafficlight_operating : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_OPERATING] >= trafficlight_operating
				&& stateConfVector[SCVI_TRAFFICLIGHT_OPERATING] <= trafficlight_operating_r_go);
		case trafficlight_operating_r_prepare : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_OPERATING_R_PREPARE] >= trafficlight_operating_r_prepare
				&& stateConfVector[SCVI_TRAFFICLIGHT_OPERATING_R_PREPARE] <= trafficlight_operating_r_prepare_switch_to_stop);
		case trafficlight_operating_r_prepare_switch_to_go : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO] == trafficlight_operating_r_prepare_switch_to_go
			);
		case trafficlight_operating_r_prepare_switch_to_stop : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP] == trafficlight_operating_r_prepare_switch_to_stop
			);
		case trafficlight_operating_r_stop : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_OPERATING_R_STOP] == trafficlight_operating_r_stop
			);
		case trafficlight_operating_r_go : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_OPERATING_R_GO] == trafficlight_operating_r_go
			);
		case trafficlight_standby : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_STANDBY] >= trafficlight_standby
				&& stateConfVector[SCVI_TRAFFICLIGHT_STANDBY] <= trafficlight_standby_blink_off);
		case trafficlight_standby_blink_on : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_STANDBY_BLINK_ON] == trafficlight_standby_blink_on
			);
		case trafficlight_standby_blink_off : 
			return (sc_boolean) (stateConfVector[SCVI_TRAFFICLIGHT_STANDBY_BLINK_OFF] == trafficlight_standby_blink_off
			);
		default: return false;
	}
}

/* Functions for event standby in interface  */
void TrafficLightStateMachine::standby()
{
	inEventQueue.push_back(new SctEvent__standby(TrafficLightStateMachineEventName::standby));
	runCycle();
}
void TrafficLightStateMachine::internal_standby()
{
	standby_raised = true;
}
/* Functions for event operate in interface  */
void TrafficLightStateMachine::operate()
{
	inEventQueue.push_back(new SctEvent__operate(TrafficLightStateMachineEventName::operate));
	runCycle();
}
void TrafficLightStateMachine::internal_operate()
{
	operate_raised = true;
}
/* Functions for event redOn in interface  */
/* Functions for event redOff in interface  */
/* Functions for event yellowOn in interface  */
/* Functions for event yellowOff in interface  */
/* Functions for event greenOn in interface  */
/* Functions for event greenOff in interface  */

// implementations of all internal functions

sc_integer TrafficLightStateMachine::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer TrafficLightStateMachine::trafficlight_operating_react(const sc_integer transitioned_before) {
	/* The reactions of state operating. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (standby_raised)
		{ 
			/* Default exit sequence for state operating */
			/* Default exit sequence for region r */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.operating.r) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case trafficlight_operating_r_prepare_switch_to_go :
				{
					/* Default exit sequence for state to go */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'to go'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
					emit redOff();
					/* Exit action for state 'prepare'. */
					emit yellowOff();
					break;
				}
				case trafficlight_operating_r_prepare_switch_to_stop :
				{
					/* Default exit sequence for state to stop */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'to stop'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
					/* Exit action for state 'prepare'. */
					emit yellowOff();
					break;
				}
				case trafficlight_operating_r_stop :
				{
					/* Default exit sequence for state stop */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'stop'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
					emit redOff();
					break;
				}
				case trafficlight_operating_r_go :
				{
					/* Default exit sequence for state go */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'go'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
					emit greenOff();
					break;
				}
				default: break;
			}
			/* 'default' enter sequence for state standby */
			/* 'default' enter sequence for region blink */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state on */
			/* Entry action for state 'on'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[4]), (1 * 1000), false);
			emit yellowOn();
			stateConfVector[0] = trafficlight_standby_blink_on;
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_operating_r_prepare_react(const sc_integer transitioned_before) {
	/* The reactions of state prepare. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = trafficlight_operating_react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_operating_r_prepare_switch_to_go_react(const sc_integer transitioned_before) {
	/* The reactions of state to go. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[0])
		{ 
			/* Default exit sequence for state prepare */
			/* Default exit sequence for region switch */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.operating.r.prepare.switch) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case trafficlight_operating_r_prepare_switch_to_go :
				{
					/* Default exit sequence for state to go */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'to go'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
					emit redOff();
					break;
				}
				case trafficlight_operating_r_prepare_switch_to_stop :
				{
					/* Default exit sequence for state to stop */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'to stop'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
					break;
				}
				default: break;
			}
			/* Exit action for state 'prepare'. */
			emit yellowOff();
			/* 'default' enter sequence for state go */
			/* Entry action for state 'go'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[3]), (3 * 1000), false);
			emit greenOn();
			stateConfVector[0] = trafficlight_operating_r_go;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = trafficlight_operating_r_prepare_react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_operating_r_prepare_switch_to_stop_react(const sc_integer transitioned_before) {
	/* The reactions of state to stop. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[1])
		{ 
			/* Default exit sequence for state prepare */
			/* Default exit sequence for region switch */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.operating.r.prepare.switch) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case trafficlight_operating_r_prepare_switch_to_go :
				{
					/* Default exit sequence for state to go */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'to go'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
					emit redOff();
					break;
				}
				case trafficlight_operating_r_prepare_switch_to_stop :
				{
					/* Default exit sequence for state to stop */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'to stop'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
					break;
				}
				default: break;
			}
			/* Exit action for state 'prepare'. */
			emit yellowOff();
			/* 'default' enter sequence for state stop */
			/* Entry action for state 'stop'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[2]), (3 * 1000), false);
			emit redOn();
			stateConfVector[0] = trafficlight_operating_r_stop;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = trafficlight_operating_r_prepare_react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_operating_r_stop_react(const sc_integer transitioned_before) {
	/* The reactions of state stop. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[2])
		{ 
			/* Default exit sequence for state stop */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'stop'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
			emit redOff();
			/* Entry action for state 'prepare'. */
			emit yellowOn();
			/* 'default' enter sequence for state to go */
			/* Entry action for state 'to go'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), (1 * 1000), false);
			emit redOn();
			stateConfVector[0] = trafficlight_operating_r_prepare_switch_to_go;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = trafficlight_operating_react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_operating_r_go_react(const sc_integer transitioned_before) {
	/* The reactions of state go. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[3])
		{ 
			/* Default exit sequence for state go */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'go'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
			emit greenOff();
			/* Entry action for state 'prepare'. */
			emit yellowOn();
			/* 'default' enter sequence for state to stop */
			/* Entry action for state 'to stop'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[1]), (1 * 1000), false);
			stateConfVector[0] = trafficlight_operating_r_prepare_switch_to_stop;
			trafficlight_operating_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = trafficlight_operating_react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_standby_react(const sc_integer transitioned_before) {
	/* The reactions of state standby. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (operate_raised)
		{ 
			/* Default exit sequence for state standby */
			/* Default exit sequence for region blink */
			/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight.standby.blink) at position 0... */
			switch(stateConfVector[ 0 ])
			{
				case trafficlight_standby_blink_on :
				{
					/* Default exit sequence for state on */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'on'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[4]));
					emit yellowOff();
					break;
				}
				case trafficlight_standby_blink_off :
				{
					/* Default exit sequence for state off */
					stateConfVector[0] = TrafficLightStateMachine_last_state;
					/* Exit action for state 'off'. */
					timerService->unsetTimer(this, (sc_eventid)(&timeEvents[5]));
					break;
				}
				default: break;
			}
			/* 'default' enter sequence for state operating */
			/* 'default' enter sequence for region r */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state stop */
			/* Entry action for state 'stop'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[2]), (3 * 1000), false);
			emit redOn();
			stateConfVector[0] = trafficlight_operating_r_stop;
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_standby_blink_on_react(const sc_integer transitioned_before) {
	/* The reactions of state on. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[4])
		{ 
			/* Default exit sequence for state on */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'on'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[4]));
			emit yellowOff();
			/* 'default' enter sequence for state off */
			/* Entry action for state 'off'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[5]), (1 * 1000), false);
			stateConfVector[0] = trafficlight_standby_blink_off;
			trafficlight_standby_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = trafficlight_standby_react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer TrafficLightStateMachine::trafficlight_standby_blink_off_react(const sc_integer transitioned_before) {
	/* The reactions of state off. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[5])
		{ 
			/* Default exit sequence for state off */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'off'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[5]));
			/* 'default' enter sequence for state on */
			/* Entry action for state 'on'. */
			timerService->setTimer(this, (sc_eventid)(&timeEvents[4]), (1 * 1000), false);
			emit yellowOn();
			stateConfVector[0] = trafficlight_standby_blink_on;
			trafficlight_standby_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = trafficlight_standby_react(transitioned_before);
	} 
	return transitioned_after;
}

void TrafficLightStateMachine::clearInEvents() {
	standby_raised = false;
	operate_raised = false;
	timeEvents[0] = false;
	timeEvents[1] = false;
	timeEvents[2] = false;
	timeEvents[3] = false;
	timeEvents[4] = false;
	timeEvents[5] = false;
}

void TrafficLightStateMachine::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case trafficlight_operating_r_prepare_switch_to_go :
		{
			trafficlight_operating_r_prepare_switch_to_go_react(-1);
			break;
		}
		case trafficlight_operating_r_prepare_switch_to_stop :
		{
			trafficlight_operating_r_prepare_switch_to_stop_react(-1);
			break;
		}
		case trafficlight_operating_r_stop :
		{
			trafficlight_operating_r_stop_react(-1);
			break;
		}
		case trafficlight_operating_r_go :
		{
			trafficlight_operating_r_go_react(-1);
			break;
		}
		case trafficlight_standby_blink_on :
		{
			trafficlight_standby_blink_on_react(-1);
			break;
		}
		case trafficlight_standby_blink_off :
		{
			trafficlight_standby_blink_off_react(-1);
			break;
		}
		default: break;
	}
}

void TrafficLightStateMachine::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
		dispatch_event(getNextEvent());
	} while ((((((((standby_raised) || (operate_raised)) || (timeEvents[0])) || (timeEvents[1])) || (timeEvents[2])) || (timeEvents[3])) || (timeEvents[4])) || (timeEvents[5]));
	isExecuting = false;
}

void TrafficLightStateMachine::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart TrafficLightStateMachine */
	/* Entry action for statechart 'TrafficLightStateMachine'. */
	emit redOff();
	emit yellowOff();
	emit greenOff();
	/* 'default' enter sequence for region trafficlight */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state operating */
	/* 'default' enter sequence for region r */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state stop */
	/* Entry action for state 'stop'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[2]), (3 * 1000), false);
	emit redOn();
	stateConfVector[0] = trafficlight_operating_r_stop;
	isExecuting = false;
}

void TrafficLightStateMachine::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart TrafficLightStateMachine */
	/* Default exit sequence for region trafficlight */
	/* Handle exit of all possible states (of TrafficLightStateMachine.trafficlight) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case trafficlight_operating_r_prepare_switch_to_go :
		{
			/* Default exit sequence for state to go */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'to go'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
			emit redOff();
			/* Exit action for state 'prepare'. */
			emit yellowOff();
			break;
		}
		case trafficlight_operating_r_prepare_switch_to_stop :
		{
			/* Default exit sequence for state to stop */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'to stop'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
			/* Exit action for state 'prepare'. */
			emit yellowOff();
			break;
		}
		case trafficlight_operating_r_stop :
		{
			/* Default exit sequence for state stop */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'stop'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
			emit redOff();
			break;
		}
		case trafficlight_operating_r_go :
		{
			/* Default exit sequence for state go */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'go'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
			emit greenOff();
			break;
		}
		case trafficlight_standby_blink_on :
		{
			/* Default exit sequence for state on */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'on'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[4]));
			emit yellowOff();
			break;
		}
		case trafficlight_standby_blink_off :
		{
			/* Default exit sequence for state off */
			stateConfVector[0] = TrafficLightStateMachine_last_state;
			/* Exit action for state 'off'. */
			timerService->unsetTimer(this, (sc_eventid)(&timeEvents[5]));
			break;
		}
		default: break;
	}
	isExecuting = false;
}



