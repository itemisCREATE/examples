/** Generated by itemis CREATE code generator. */

#ifndef TRAFFICLIGHTSTATEMACHINE_H_
#define TRAFFICLIGHTSTATEMACHINE_H_

/*!
 * Forward declaration for the TrafficLightStateMachine state machine.
 */
 class TrafficLightStateMachine;


#include <deque>
#include "sc_types.h"
#include "sc_rxcpp.h"
#include "sc_statemachine.h"
#include "sc_timer.h"
#include <QObject>

/*! \file Header of the state machine 'TrafficLightStateMachine'.
*/


#ifndef SCT_EVENTS_TRAFFICLIGHTSTATEMACHINE_H
#define SCT_EVENTS_TRAFFICLIGHTSTATEMACHINE_H
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

namespace trafficlightstatemachine_events
{
typedef enum  {
	invalid_event = SC_INVALID_EVENT_VALUE,
	standby,
	operate,
	TrafficLightStateMachine_trafficlight_operating_r_prepare_switch_to_go_time_event_0,
	TrafficLightStateMachine_trafficlight_operating_r_prepare_switch_to_stop_time_event_0,
	TrafficLightStateMachine_trafficlight_operating_r_stop_time_event_0,
	TrafficLightStateMachine_trafficlight_operating_r_go_time_event_0,
	TrafficLightStateMachine_trafficlight_standby_blink_on_time_event_0,
	TrafficLightStateMachine_trafficlight_standby_blink_off_time_event_0
} TrafficLightStateMachineEventName;

class SctEvent
{
	public:
		SctEvent(TrafficLightStateMachineEventName name) : name(name){}
		virtual ~SctEvent(){}
		const TrafficLightStateMachineEventName name;
		
};
		
template <typename T>
class TypedSctEvent : public SctEvent
{
	public:
		TypedSctEvent(TrafficLightStateMachineEventName name, T value) :
			SctEvent(name),
			value(value)
			{}
		virtual ~TypedSctEvent(){}
		const T value;
};

class SctEvent__standby : public SctEvent
{
	public:
		SctEvent__standby(TrafficLightStateMachineEventName name) : SctEvent(name){};
};
class SctEvent__operate : public SctEvent
{
	public:
		SctEvent__operate(TrafficLightStateMachineEventName name) : SctEvent(name){};
};
class TimedSctEvent : public SctEvent
{
	public:
		TimedSctEvent(TrafficLightStateMachineEventName name) : SctEvent(name){};
};

}
#endif /* SCT_EVENTS_TRAFFICLIGHTSTATEMACHINE_H */


/*! Define indices of states in the StateConfVector */
#define SCVI_TRAFFICLIGHT_OPERATING 0
#define SCVI_TRAFFICLIGHT_OPERATING_R_PREPARE 0
#define SCVI_TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_GO 0
#define SCVI_TRAFFICLIGHT_OPERATING_R_PREPARE_SWITCH_TO_STOP 0
#define SCVI_TRAFFICLIGHT_OPERATING_R_STOP 0
#define SCVI_TRAFFICLIGHT_OPERATING_R_GO 0
#define SCVI_TRAFFICLIGHT_STANDBY 0
#define SCVI_TRAFFICLIGHT_STANDBY_BLINK_ON 0
#define SCVI_TRAFFICLIGHT_STANDBY_BLINK_OFF 0


class TrafficLightStateMachine : public QObject, public sc::timer::TimedInterface, public sc::StatemachineInterface
{
	Q_OBJECT
	
	public:
		TrafficLightStateMachine(QObject *parent);
		
		~TrafficLightStateMachine();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			TrafficLightStateMachine_last_state,
			trafficlight_operating,
			trafficlight_operating_r_prepare,
			trafficlight_operating_r_prepare_switch_to_go,
			trafficlight_operating_r_prepare_switch_to_stop,
			trafficlight_operating_r_stop,
			trafficlight_operating_r_go,
			trafficlight_standby,
			trafficlight_standby_blink_on,
			trafficlight_standby_blink_off
		} TrafficLightStateMachineStates;
					
		static const sc_integer numStates = 9;
		
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		virtual void setTimerService(sc::timer::TimerServiceInterface* timerService);
		
		virtual sc::timer::TimerServiceInterface* getTimerService();
		
		virtual void raiseTimeEvent(sc_eventid event);
		
		virtual sc_integer getNumberOfParallelTimeEvents();
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(TrafficLightStateMachineStates state) const;
		
		//! number of time events used by the state machine.
		static const sc_integer timeEventsCount = 6;
		
		//! number of time events that can be active at once.
		static const sc_integer parallelTimeEventsCount = 1;
		
		
	public slots:
		/*! slot for the in event 'standby' that is defined in the default interface scope. */
		void standby();
		
		/*! slot for the in event 'operate' that is defined in the default interface scope. */
		void operate();
		
		
	signals:
		/*! Signal representing the out event 'redOn' that is defined in the default interface scope. */
		void redOn();
		
		/*! Signal representing the out event 'redOff' that is defined in the default interface scope. */
		void redOff();
		
		/*! Signal representing the out event 'yellowOn' that is defined in the default interface scope. */
		void yellowOn();
		
		/*! Signal representing the out event 'yellowOff' that is defined in the default interface scope. */
		void yellowOff();
		
		/*! Signal representing the out event 'greenOn' that is defined in the default interface scope. */
		void greenOn();
		
		/*! Signal representing the out event 'greenOff' that is defined in the default interface scope. */
		void greenOff();
		
	
	protected:
		
		
	private:
		TrafficLightStateMachine(const TrafficLightStateMachine &rhs);
		TrafficLightStateMachine& operator=(const TrafficLightStateMachine&);
		
		/*! Raises the in event 'standby' that is defined in the default interface scope. */
		void internal_standby();
		sc_boolean standby_raised;
		/*! Raises the in event 'operate' that is defined in the default interface scope. */
		void internal_operate();
		sc_boolean operate_raised;
		void iface_dispatch_event(trafficlightstatemachine_events::SctEvent * event);
		
		void internal_dispatch_event(trafficlightstatemachine_events::SctEvent * event);
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		sc::timer::TimerServiceInterface* timerService;
		sc_boolean timeEvents[timeEventsCount];
		
		
		TrafficLightStateMachineStates stateConfVector[maxOrthogonalStates];
		
		
		
		
		sc_boolean isExecuting;
		
		
		// prototypes of all internal functions
		
		sc_integer react(const sc_integer transitioned_before);
		sc_integer trafficlight_operating_react(const sc_integer transitioned_before);
		sc_integer trafficlight_operating_r_prepare_react(const sc_integer transitioned_before);
		sc_integer trafficlight_operating_r_prepare_switch_to_go_react(const sc_integer transitioned_before);
		sc_integer trafficlight_operating_r_prepare_switch_to_stop_react(const sc_integer transitioned_before);
		sc_integer trafficlight_operating_r_stop_react(const sc_integer transitioned_before);
		sc_integer trafficlight_operating_r_go_react(const sc_integer transitioned_before);
		sc_integer trafficlight_standby_react(const sc_integer transitioned_before);
		sc_integer trafficlight_standby_blink_on_react(const sc_integer transitioned_before);
		sc_integer trafficlight_standby_blink_off_react(const sc_integer transitioned_before);
		void clearInEvents();
		void microStep();
		void runCycle();
		
		
		trafficlightstatemachine_events::SctEvent* getNextEvent();
		void dispatch_event(trafficlightstatemachine_events::SctEvent * event);
		trafficlightstatemachine_events::TrafficLightStateMachineEventName getTimedEventName(sc_eventid evid);
		std::deque<trafficlightstatemachine_events::SctEvent*> inEventQueue;
		
		
};




#endif /* TRAFFICLIGHTSTATEMACHINE_H_ */
