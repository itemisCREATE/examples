"""Implementation of statechart traffic_light_ctrl.
Generated by itemis CREATE code generator.
"""


class TrafficLightCtrl:
	"""Implementation of the state machine TrafficLightCtrl.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_on,
			main_region_on_r1street_green,
			main_region_on_r1ped_waiting,
			main_region_on_r1ped_waiting_r1wait_on,
			main_region_on_r1ped_waiting_r1wait_off,
			main_region_on_r1street_attention,
			main_region_on_r1street_red,
			main_region_on_r1pedestrian_green,
			main_region_on_r1pedestrian_red,
			main_region_on_r1street_prepare,
			main_region_on_r1safe,
			main_region_off,
			main_region_off_r1yellow_on,
			main_region_off_r1yellow_off,
			null_state
		) = range(15)
	
	
	class EvBuf:
		"""Implementation of internal scope.
		"""
		
		def __init__(self):
			self.pedestrian_request = False
			self.on_off = False
	
	class TimeEventsEvBuf:
		"""Implementation of internal scope.
		"""
		
		def __init__(self):
			self.traffic_light_ctrl_main_region_on_r1ped_waiting_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_on_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_off_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1street_attention_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1street_red_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1pedestrian_green_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1pedestrian_red_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1street_prepare_time_event_0 = False
			self.traffic_light_ctrl_main_region_on_r1safe_time_event_0 = False
			self.traffic_light_ctrl_main_region_off_r1yellow_on_time_event_0 = False
			self.traffic_light_ctrl_main_region_off_r1yellow_off_time_event_0 = False
			self.traffic_light_ctrl_time_event_0 = False
	
	class TrafficLightCtrlEvBuf:
		"""Implementation of internal scope.
		"""
		
		def __init__(self, iface, time_events):
			self.iface = iface
			self.time_events = time_events
	
	class TrafficLight:
		"""Implementation of scope TrafficLight.
		"""
		
		def __init__(self, statemachine):
			self.red = None
			self.yellow = None
			self.green = None
			
			self.statemachine = statemachine
		
	
	class Pedestrian:
		"""Implementation of scope Pedestrian.
		"""
		
		def __init__(self, statemachine):
			self.request = None
			self.red = None
			self.green = None
			
			self.statemachine = statemachine
		
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		self.traffic_light = TrafficLightCtrl.TrafficLight(self)
		self.pedestrian = TrafficLightCtrl.Pedestrian(self)
		
		self.pedestrian_request = None
		self.on_off = None
		self.operation_callback = None
		
		
		# enumeration of all states:
		self.__State = TrafficLightCtrl.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 1
		for __state_index in range(1):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 12
		
		# initializations:
		self.traffic_light.red = False
		self.traffic_light.yellow = False
		self.traffic_light.green = False
		self.pedestrian.request = False
		self.pedestrian.red = False
		self.pedestrian.green = False
		self.__current = self.TrafficLightCtrlEvBuf(
			self.EvBuf(), 
			self.TimeEventsEvBuf()
		)
		self.__is_executing = False
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_on:
			return (self.__state_vector[0] >= self.__State.main_region_on)\
				and (self.__state_vector[0] <= self.__State.main_region_on_r1safe)
		if s == self.__State.main_region_on_r1street_green:
			return self.__state_vector[0] == self.__State.main_region_on_r1street_green
		if s == self.__State.main_region_on_r1ped_waiting:
			return (self.__state_vector[0] >= self.__State.main_region_on_r1ped_waiting)\
				and (self.__state_vector[0] <= self.__State.main_region_on_r1ped_waiting_r1wait_off)
		if s == self.__State.main_region_on_r1ped_waiting_r1wait_on:
			return self.__state_vector[0] == self.__State.main_region_on_r1ped_waiting_r1wait_on
		if s == self.__State.main_region_on_r1ped_waiting_r1wait_off:
			return self.__state_vector[0] == self.__State.main_region_on_r1ped_waiting_r1wait_off
		if s == self.__State.main_region_on_r1street_attention:
			return self.__state_vector[0] == self.__State.main_region_on_r1street_attention
		if s == self.__State.main_region_on_r1street_red:
			return self.__state_vector[0] == self.__State.main_region_on_r1street_red
		if s == self.__State.main_region_on_r1pedestrian_green:
			return self.__state_vector[0] == self.__State.main_region_on_r1pedestrian_green
		if s == self.__State.main_region_on_r1pedestrian_red:
			return self.__state_vector[0] == self.__State.main_region_on_r1pedestrian_red
		if s == self.__State.main_region_on_r1street_prepare:
			return self.__state_vector[0] == self.__State.main_region_on_r1street_prepare
		if s == self.__State.main_region_on_r1safe:
			return self.__state_vector[0] == self.__State.main_region_on_r1safe
		if s == self.__State.main_region_off:
			return (self.__state_vector[0] >= self.__State.main_region_off)\
				and (self.__state_vector[0] <= self.__State.main_region_off_r1yellow_off)
		if s == self.__State.main_region_off_r1yellow_on:
			return self.__state_vector[0] == self.__State.main_region_off_r1yellow_on
		if s == self.__State.main_region_off_r1yellow_off:
			return self.__state_vector[0] == self.__State.main_region_off_r1yellow_off
		return False
		
	def time_elapsed(self, event_id):
		""" Mark the corresponding time event as True.
		"""
		if event_id in range(12):
			self.__time_events[event_id] = True
	
	def raise_pedestrian_request(self):
		"""Raise method for event pedestrian_request.
		"""
		self.pedestrian_request = True
		
	def raise_on_off(self):
		"""Raise method for event on_off.
		"""
		self.on_off = True
		
	def __entry_action_main_region_on_r1_street_green(self):
		"""Entry action for state 'StreetGreen'..
		"""
		self.traffic_light.red = False
		self.traffic_light.yellow = False
		self.traffic_light.green = True
		self.pedestrian.red = True
		self.pedestrian.green = False
		self.pedestrian.request = False
		
	def __entry_action_main_region_on_r1_ped_waiting(self):
		"""Entry action for state 'PedWaiting'..
		"""
		self.timer_service.set_timer(self, 0, (7 * 1000), False)
		
	def __entry_action_main_region_on_r1_ped_waiting_r1_wait_on(self):
		"""Entry action for state 'waitOn'..
		"""
		self.timer_service.set_timer(self, 1, 500, False)
		self.pedestrian.request = True
		
	def __entry_action_main_region_on_r1_ped_waiting_r1_wait_off(self):
		"""Entry action for state 'waitOff'..
		"""
		self.timer_service.set_timer(self, 2, 500, False)
		self.pedestrian.request = False
		
	def __entry_action_main_region_on_r1_street_attention(self):
		"""Entry action for state 'StreetAttention'..
		"""
		self.timer_service.set_timer(self, 3, (2 * 1000), False)
		self.traffic_light.red = False
		self.traffic_light.yellow = True
		self.traffic_light.green = False
		
	def __entry_action_main_region_on_r1_street_red(self):
		"""Entry action for state 'StreetRed'..
		"""
		self.timer_service.set_timer(self, 4, (2 * 1000), False)
		self.traffic_light.red = True
		self.traffic_light.yellow = False
		self.traffic_light.green = False
		
	def __entry_action_main_region_on_r1_pedestrian_green(self):
		"""Entry action for state 'PedestrianGreen'..
		"""
		self.timer_service.set_timer(self, 5, (7 * 1000), False)
		self.pedestrian.red = False
		self.pedestrian.green = True
		
	def __entry_action_main_region_on_r1_pedestrian_red(self):
		"""Entry action for state 'PedestrianRed'..
		"""
		self.timer_service.set_timer(self, 6, (5 * 1000), False)
		self.pedestrian.red = True
		self.pedestrian.green = False
		
	def __entry_action_main_region_on_r1_street_prepare(self):
		"""Entry action for state 'StreetPrepare'..
		"""
		self.timer_service.set_timer(self, 7, (2 * 1000), False)
		self.traffic_light.red = True
		self.traffic_light.yellow = True
		self.traffic_light.green = False
		
	def __entry_action_main_region_on_r1_safe(self):
		"""Entry action for state 'Safe'..
		"""
		self.timer_service.set_timer(self, 8, (10 * 1000), False)
		self.traffic_light.red = True
		self.traffic_light.yellow = False
		self.traffic_light.green = False
		self.pedestrian.red = True
		self.pedestrian.green = False
		self.pedestrian.request = False
		
	def __entry_action_main_region_off(self):
		"""Entry action for state 'off'..
		"""
		self.traffic_light.red = False
		self.traffic_light.green = False
		self.traffic_light.yellow = False
		self.pedestrian.red = False
		self.pedestrian.green = False
		
	def __entry_action_main_region_off_r1_yellow_on(self):
		"""Entry action for state 'YellowOn'..
		"""
		self.timer_service.set_timer(self, 9, 500, False)
		self.traffic_light.yellow = True
		self.pedestrian.request = True
		
	def __entry_action_main_region_off_r1_yellow_off(self):
		"""Entry action for state 'YellowOff'..
		"""
		self.timer_service.set_timer(self, 10, 500, False)
		self.traffic_light.yellow = False
		self.pedestrian.request = False
		
	def __exit_action_main_region_on_r1_ped_waiting(self):
		"""Exit action for state 'PedWaiting'..
		"""
		self.timer_service.unset_timer(self, 0)
		self.pedestrian.request = False
		
	def __exit_action_main_region_on_r1_ped_waiting_r1_wait_on(self):
		"""Exit action for state 'waitOn'..
		"""
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_main_region_on_r1_ped_waiting_r1_wait_off(self):
		"""Exit action for state 'waitOff'..
		"""
		self.timer_service.unset_timer(self, 2)
		
	def __exit_action_main_region_on_r1_street_attention(self):
		"""Exit action for state 'StreetAttention'..
		"""
		self.timer_service.unset_timer(self, 3)
		
	def __exit_action_main_region_on_r1_street_red(self):
		"""Exit action for state 'StreetRed'..
		"""
		self.timer_service.unset_timer(self, 4)
		
	def __exit_action_main_region_on_r1_pedestrian_green(self):
		"""Exit action for state 'PedestrianGreen'..
		"""
		self.timer_service.unset_timer(self, 5)
		
	def __exit_action_main_region_on_r1_pedestrian_red(self):
		"""Exit action for state 'PedestrianRed'..
		"""
		self.timer_service.unset_timer(self, 6)
		
	def __exit_action_main_region_on_r1_street_prepare(self):
		"""Exit action for state 'StreetPrepare'..
		"""
		self.timer_service.unset_timer(self, 7)
		
	def __exit_action_main_region_on_r1_safe(self):
		"""Exit action for state 'Safe'..
		"""
		self.timer_service.unset_timer(self, 8)
		
	def __exit_action_main_region_off_r1_yellow_on(self):
		"""Exit action for state 'YellowOn'..
		"""
		self.timer_service.unset_timer(self, 9)
		
	def __exit_action_main_region_off_r1_yellow_off(self):
		"""Exit action for state 'YellowOff'..
		"""
		self.timer_service.unset_timer(self, 10)
		
	def __enter_sequence_main_region_on_default(self):
		"""'default' enter sequence for state on.
		"""
		self.__enter_sequence_main_region_on_r1_default()
		
	def __enter_sequence_main_region_on_r1_street_green_default(self):
		"""'default' enter sequence for state StreetGreen.
		"""
		self.__entry_action_main_region_on_r1_street_green()
		self.__state_vector[0] = self.State.main_region_on_r1street_green
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_ped_waiting_default(self):
		"""'default' enter sequence for state PedWaiting.
		"""
		self.__entry_action_main_region_on_r1_ped_waiting()
		self.__enter_sequence_main_region_on_r1_ped_waiting_r1_default()
		
	def __enter_sequence_main_region_on_r1_ped_waiting_r1_wait_on_default(self):
		"""'default' enter sequence for state waitOn.
		"""
		self.__entry_action_main_region_on_r1_ped_waiting_r1_wait_on()
		self.__state_vector[0] = self.State.main_region_on_r1ped_waiting_r1wait_on
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_ped_waiting_r1_wait_off_default(self):
		"""'default' enter sequence for state waitOff.
		"""
		self.__entry_action_main_region_on_r1_ped_waiting_r1_wait_off()
		self.__state_vector[0] = self.State.main_region_on_r1ped_waiting_r1wait_off
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_street_attention_default(self):
		"""'default' enter sequence for state StreetAttention.
		"""
		self.__entry_action_main_region_on_r1_street_attention()
		self.__state_vector[0] = self.State.main_region_on_r1street_attention
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_street_red_default(self):
		"""'default' enter sequence for state StreetRed.
		"""
		self.__entry_action_main_region_on_r1_street_red()
		self.__state_vector[0] = self.State.main_region_on_r1street_red
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_pedestrian_green_default(self):
		"""'default' enter sequence for state PedestrianGreen.
		"""
		self.__entry_action_main_region_on_r1_pedestrian_green()
		self.__state_vector[0] = self.State.main_region_on_r1pedestrian_green
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_pedestrian_red_default(self):
		"""'default' enter sequence for state PedestrianRed.
		"""
		self.__entry_action_main_region_on_r1_pedestrian_red()
		self.__state_vector[0] = self.State.main_region_on_r1pedestrian_red
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_street_prepare_default(self):
		"""'default' enter sequence for state StreetPrepare.
		"""
		self.__entry_action_main_region_on_r1_street_prepare()
		self.__state_vector[0] = self.State.main_region_on_r1street_prepare
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_on_r1_safe_default(self):
		"""'default' enter sequence for state Safe.
		"""
		self.__entry_action_main_region_on_r1_safe()
		self.__state_vector[0] = self.State.main_region_on_r1safe
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_off_default(self):
		"""'default' enter sequence for state off.
		"""
		self.__entry_action_main_region_off()
		self.__enter_sequence_main_region_off_r1_default()
		
	def __enter_sequence_main_region_off_r1_yellow_on_default(self):
		"""'default' enter sequence for state YellowOn.
		"""
		self.__entry_action_main_region_off_r1_yellow_on()
		self.__state_vector[0] = self.State.main_region_off_r1yellow_on
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_off_r1_yellow_off_default(self):
		"""'default' enter sequence for state YellowOff.
		"""
		self.__entry_action_main_region_off_r1_yellow_off()
		self.__state_vector[0] = self.State.main_region_off_r1yellow_off
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_on_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_on_r1__entry_default()
		
	def __enter_sequence_main_region_on_r1_ped_waiting_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_on_r1_ped_waiting_r1__entry_default()
		
	def __enter_sequence_main_region_off_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_off_r1__entry_default()
		
	def __exit_sequence_main_region_on(self):
		"""Default exit sequence for state on.
		"""
		self.__exit_sequence_main_region_on_r1()
		
	def __exit_sequence_main_region_on_r1_street_green(self):
		"""Default exit sequence for state StreetGreen.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_on_r1_ped_waiting(self):
		"""Default exit sequence for state PedWaiting.
		"""
		self.__exit_sequence_main_region_on_r1_ped_waiting_r1()
		self.__exit_action_main_region_on_r1_ped_waiting()
		
	def __exit_sequence_main_region_on_r1_ped_waiting_r1_wait_on(self):
		"""Default exit sequence for state waitOn.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_ped_waiting_r1_wait_on()
		
	def __exit_sequence_main_region_on_r1_ped_waiting_r1_wait_off(self):
		"""Default exit sequence for state waitOff.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_ped_waiting_r1_wait_off()
		
	def __exit_sequence_main_region_on_r1_street_attention(self):
		"""Default exit sequence for state StreetAttention.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_street_attention()
		
	def __exit_sequence_main_region_on_r1_street_red(self):
		"""Default exit sequence for state StreetRed.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_street_red()
		
	def __exit_sequence_main_region_on_r1_pedestrian_green(self):
		"""Default exit sequence for state PedestrianGreen.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_pedestrian_green()
		
	def __exit_sequence_main_region_on_r1_pedestrian_red(self):
		"""Default exit sequence for state PedestrianRed.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_pedestrian_red()
		
	def __exit_sequence_main_region_on_r1_street_prepare(self):
		"""Default exit sequence for state StreetPrepare.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_street_prepare()
		
	def __exit_sequence_main_region_on_r1_safe(self):
		"""Default exit sequence for state Safe.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_on_r1_safe()
		
	def __exit_sequence_main_region_off(self):
		"""Default exit sequence for state off.
		"""
		self.__exit_sequence_main_region_off_r1()
		
	def __exit_sequence_main_region_off_r1_yellow_on(self):
		"""Default exit sequence for state YellowOn.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_off_r1_yellow_on()
		
	def __exit_sequence_main_region_off_r1_yellow_off(self):
		"""Default exit sequence for state YellowOff.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region_off_r1_yellow_off()
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_r1street_green:
			self.__exit_sequence_main_region_on_r1_street_green()
		elif state == self.State.main_region_on_r1ped_waiting_r1wait_on:
			self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_on()
			self.__exit_action_main_region_on_r1_ped_waiting()
		elif state == self.State.main_region_on_r1ped_waiting_r1wait_off:
			self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_off()
			self.__exit_action_main_region_on_r1_ped_waiting()
		elif state == self.State.main_region_on_r1street_attention:
			self.__exit_sequence_main_region_on_r1_street_attention()
		elif state == self.State.main_region_on_r1street_red:
			self.__exit_sequence_main_region_on_r1_street_red()
		elif state == self.State.main_region_on_r1pedestrian_green:
			self.__exit_sequence_main_region_on_r1_pedestrian_green()
		elif state == self.State.main_region_on_r1pedestrian_red:
			self.__exit_sequence_main_region_on_r1_pedestrian_red()
		elif state == self.State.main_region_on_r1street_prepare:
			self.__exit_sequence_main_region_on_r1_street_prepare()
		elif state == self.State.main_region_on_r1safe:
			self.__exit_sequence_main_region_on_r1_safe()
		elif state == self.State.main_region_off_r1yellow_on:
			self.__exit_sequence_main_region_off_r1_yellow_on()
		elif state == self.State.main_region_off_r1yellow_off:
			self.__exit_sequence_main_region_off_r1_yellow_off()
		
	def __exit_sequence_main_region_on_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_r1street_green:
			self.__exit_sequence_main_region_on_r1_street_green()
		elif state == self.State.main_region_on_r1ped_waiting_r1wait_on:
			self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_on()
			self.__exit_action_main_region_on_r1_ped_waiting()
		elif state == self.State.main_region_on_r1ped_waiting_r1wait_off:
			self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_off()
			self.__exit_action_main_region_on_r1_ped_waiting()
		elif state == self.State.main_region_on_r1street_attention:
			self.__exit_sequence_main_region_on_r1_street_attention()
		elif state == self.State.main_region_on_r1street_red:
			self.__exit_sequence_main_region_on_r1_street_red()
		elif state == self.State.main_region_on_r1pedestrian_green:
			self.__exit_sequence_main_region_on_r1_pedestrian_green()
		elif state == self.State.main_region_on_r1pedestrian_red:
			self.__exit_sequence_main_region_on_r1_pedestrian_red()
		elif state == self.State.main_region_on_r1street_prepare:
			self.__exit_sequence_main_region_on_r1_street_prepare()
		elif state == self.State.main_region_on_r1safe:
			self.__exit_sequence_main_region_on_r1_safe()
		
	def __exit_sequence_main_region_on_r1_ped_waiting_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_r1ped_waiting_r1wait_on:
			self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_on()
		elif state == self.State.main_region_on_r1ped_waiting_r1wait_off:
			self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_off()
		
	def __exit_sequence_main_region_off_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_off_r1yellow_on:
			self.__exit_sequence_main_region_off_r1_yellow_on()
		elif state == self.State.main_region_off_r1yellow_off:
			self.__exit_sequence_main_region_off_r1_yellow_off()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_off_default()
		
	def __react_main_region_on_r1_ped_waiting_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_r1_ped_waiting_r1_wait_on_default()
		
	def __react_main_region_on_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_r1_safe_default()
		
	def __react_main_region_off_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_off_r1_yellow_on_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		if self.__current.time_events.traffic_light_ctrl_time_event_0:
			self.operation_callback.synchronize()
		return transitioned_before
	
	
	def __main_region_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.iface.on_off:
				self.__exit_sequence_main_region_on()
				self.__enter_sequence_main_region_off_default()
				self.__react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_street_green_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_street_green_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.iface.pedestrian_request:
				self.__exit_sequence_main_region_on_r1_street_green()
				self.__enter_sequence_main_region_on_r1_ped_waiting_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_ped_waiting_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_ped_waiting_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_time_event_0:
				self.__exit_sequence_main_region_on_r1_ped_waiting()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_street_attention_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_ped_waiting_r1_wait_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_ped_waiting_r1_wait_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_on_time_event_0:
				self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_on()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_on_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_ped_waiting_r1_wait_off_default()
				self.__main_region_on_r1_ped_waiting_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_r1_ped_waiting_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_ped_waiting_r1_wait_off_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_ped_waiting_r1_wait_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_off_time_event_0:
				self.__exit_sequence_main_region_on_r1_ped_waiting_r1_wait_off()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_off_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_ped_waiting_r1_wait_on_default()
				self.__main_region_on_r1_ped_waiting_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_r1_ped_waiting_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_street_attention_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_street_attention_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_attention_time_event_0:
				self.__exit_sequence_main_region_on_r1_street_attention()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_attention_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_street_red_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_street_red_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_street_red_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_red_time_event_0:
				self.__exit_sequence_main_region_on_r1_street_red()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_red_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_pedestrian_green_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_pedestrian_green_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_pedestrian_green_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1pedestrian_green_time_event_0:
				self.__exit_sequence_main_region_on_r1_pedestrian_green()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1pedestrian_green_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_pedestrian_red_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_pedestrian_red_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_pedestrian_red_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1pedestrian_red_time_event_0:
				self.__exit_sequence_main_region_on_r1_pedestrian_red()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1pedestrian_red_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_street_prepare_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_street_prepare_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_street_prepare_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_prepare_time_event_0:
				self.__exit_sequence_main_region_on_r1_street_prepare()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_prepare_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_street_green_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_on_r1_safe_react(self, transitioned_before):
		"""Implementation of __main_region_on_r1_safe_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_on_r1safe_time_event_0:
				self.__exit_sequence_main_region_on_r1_safe()
				self.__current.time_events.traffic_light_ctrl_main_region_on_r1safe_time_event_0 = False
				self.__enter_sequence_main_region_on_r1_street_prepare_default()
				self.__main_region_on_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_off_react(self, transitioned_before):
		"""Implementation of __main_region_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.iface.on_off:
				self.__exit_sequence_main_region_off()
				self.__enter_sequence_main_region_on_default()
				self.__react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_off_r1_yellow_on_react(self, transitioned_before):
		"""Implementation of __main_region_off_r1_yellow_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_off_r1yellow_on_time_event_0:
				self.__exit_sequence_main_region_off_r1_yellow_on()
				self.__current.time_events.traffic_light_ctrl_main_region_off_r1yellow_on_time_event_0 = False
				self.__enter_sequence_main_region_off_r1_yellow_off_default()
				self.__main_region_off_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_off_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_off_r1_yellow_off_react(self, transitioned_before):
		"""Implementation of __main_region_off_r1_yellow_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__current.time_events.traffic_light_ctrl_main_region_off_r1yellow_off_time_event_0:
				self.__exit_sequence_main_region_off_r1_yellow_off()
				self.__current.time_events.traffic_light_ctrl_main_region_off_r1yellow_off_time_event_0 = False
				self.__enter_sequence_main_region_off_r1_yellow_on_default()
				self.__main_region_off_react(0)
				transitioned_after = 0
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_off_react(transitioned_before)
		return transitioned_after
	
	
	def __swap_in_events(self):
		"""Implementation of __swap_in_events function.
		"""
		self.__current.iface.pedestrian_request = self.pedestrian_request
		self.pedestrian_request = False
		self.__current.iface.on_off = self.on_off
		self.on_off = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_time_event_0 = self.__time_events[0]
		self.__time_events[0] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_on_time_event_0 = self.__time_events[1]
		self.__time_events[1] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1ped_waiting_r1wait_off_time_event_0 = self.__time_events[2]
		self.__time_events[2] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_attention_time_event_0 = self.__time_events[3]
		self.__time_events[3] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_red_time_event_0 = self.__time_events[4]
		self.__time_events[4] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1pedestrian_green_time_event_0 = self.__time_events[5]
		self.__time_events[5] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1pedestrian_red_time_event_0 = self.__time_events[6]
		self.__time_events[6] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1street_prepare_time_event_0 = self.__time_events[7]
		self.__time_events[7] = False
		self.__current.time_events.traffic_light_ctrl_main_region_on_r1safe_time_event_0 = self.__time_events[8]
		self.__time_events[8] = False
		self.__current.time_events.traffic_light_ctrl_main_region_off_r1yellow_on_time_event_0 = self.__time_events[9]
		self.__time_events[9] = False
		self.__current.time_events.traffic_light_ctrl_main_region_off_r1yellow_off_time_event_0 = self.__time_events[10]
		self.__time_events[10] = False
		self.__current.time_events.traffic_light_ctrl_time_event_0 = self.__time_events[11]
		self.__time_events[11] = False
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.pedestrian_request = False
		self.on_off = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
		self.__time_events[4] = False
		self.__time_events[5] = False
		self.__time_events[6] = False
		self.__time_events[7] = False
		self.__time_events[8] = False
		self.__time_events[9] = False
		self.__time_events[10] = False
		self.__time_events[11] = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_r1street_green:
			self.__main_region_on_r1_street_green_react(-1)
		elif state == self.State.main_region_on_r1ped_waiting_r1wait_on:
			self.__main_region_on_r1_ped_waiting_r1_wait_on_react(-1)
		elif state == self.State.main_region_on_r1ped_waiting_r1wait_off:
			self.__main_region_on_r1_ped_waiting_r1_wait_off_react(-1)
		elif state == self.State.main_region_on_r1street_attention:
			self.__main_region_on_r1_street_attention_react(-1)
		elif state == self.State.main_region_on_r1street_red:
			self.__main_region_on_r1_street_red_react(-1)
		elif state == self.State.main_region_on_r1pedestrian_green:
			self.__main_region_on_r1_pedestrian_green_react(-1)
		elif state == self.State.main_region_on_r1pedestrian_red:
			self.__main_region_on_r1_pedestrian_red_react(-1)
		elif state == self.State.main_region_on_r1street_prepare:
			self.__main_region_on_r1_street_prepare_react(-1)
		elif state == self.State.main_region_on_r1safe:
			self.__main_region_on_r1_safe_react(-1)
		elif state == self.State.main_region_off_r1yellow_on:
			self.__main_region_off_r1_yellow_on_react(-1)
		elif state == self.State.main_region_off_r1yellow_off:
			self.__main_region_off_r1_yellow_off_react(-1)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__swap_in_events()
		self.__micro_step()
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.timer_service.set_timer(self, 11, 200, True)
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.timer_service.unset_timer(self, 11)
		self.__is_executing = False
	
	
